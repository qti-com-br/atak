build_x86_64:
  stage: build
  image: ${BUILD_IMAGE_x86_64}
  before_script:
    - cmake --version
    - mkdir libs && cd libs
    - curl -L -u "$K8S_SECRET_ARTIFACTORY_USER:$K8S_SECRET_ARTIFACTORY_PASS" -O https://opai.jfrog.io/artifactory/VIN_assets/${BUILD_LIBS_x86_BUNDLE}
    - unzip ${BUILD_LIBS_x86_BUNDLE}
    #- /jfrog rt config MyArtifactory --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --apikey $ARTIFACTORY_PASS
  script:
    - echo "building..."
    # Is this command necessary? I'm really not sure what it does.
    # - cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES 
    - cd ..
    - mkdir build && cd build
    - cmake ..
    - make package -j$(nproc)
    - tar -cvzf ${TEST_ARTIFACT} ../build/test
    - mv ${BUILD_ARTIFACT_x86_64} ${CI_PROJECT_DIR}
    - mv ${TEST_ARTIFACT} ${CI_PROJECT_DIR}
  artifacts:
    paths:
      - ${BUILD_ARTIFACT_x86_64}
      - ${TEST_ARTIFACT}
  # rules:
  # - if: $CI_MERGE_REQUEST_IID
  # - if: $CI_COMMIT_TAG
  # - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

build_arm64:
  stage: build
  image: ${BUILD_IMAGE_arm64}
  before_script:
    - cmake --version
    - mkdir libs && cd libs
    - curl -L -u "$K8S_SECRET_ARTIFACTORY_USER:$K8S_SECRET_ARTIFACTORY_PASS" -O https://opai.jfrog.io/artifactory/VIN_assets/${BUILD_LIBS_arm64_BUNDLE}
    - unzip ${BUILD_LIBS_arm64_BUNDLE}
  script:
    - cd ..
    - mkdir build && cd build
    - cmake -DANDROID_STL=c++_shared -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_NDK=$ANDROID_NDK_HOME -DCMAKE_BUILD_TYPE=Release -DANDROID_ABI="arm64-v8a" -DANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.9 -DANDROID_TOOLCHAIN=clang -DQTOKEN_BUILD_ARCH=arm64 -DBUILD_TESTING=OFF ..
    - make -j$(nproc)
    - mv src/libQtoken.so ${CI_PROJECT_DIR}
  artifacts:
    paths:
      - libQtoken.so
