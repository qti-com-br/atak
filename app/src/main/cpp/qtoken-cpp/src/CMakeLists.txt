
# Package our sources and headers into an object file library
# NOTE: These lists are generated by the execute_command earlier in the file
add_library(VIN_LIB OBJECT ${SOURCES_LIST} ${HEADERS_LIST})

# Make a editable list of the base required libs for QToken
# BE CAREFUL, linking order matters!... Sometimes.
set(LIB_LINK_LIST
        aff3ct
        crypto
        kademlia
        PocoFoundation
        PocoNet
        PocoJSON
        PocoXML
        PocoUtil
        PocoEncodings
        PocoData
        PocoMongoDB
        PocoRedis
        PocoZip
)

# # Install all imported libraries
# NOTE: Useful but won't follow symlinks
#       libs are installed explicitly for this reason.
# foreach(lib ${LIB_LINK_LIST})
#         get_target_property(lib_loc ${lib} IMPORTED_LOCATION)
#         install(FILES ${lib_loc}
#                 DESTINATION lib
#         )
# endforeach()

# Add extra platform libs
list(APPEND LIB_LINK_LIST ${CMAKE_THREAD_LIBS_INIT})
# Add arch specific libs
find_library(log-lib log)
list(APPEND LIB_LINK_LIST ${log-lib})

message(${LIB_LINK_LIST})

# Link the VIN executable with the VIN_LIB source files and dependancies
#target_link_libraries(VIN_LIB PUBLIC
#        ${LIB_LINK_LIST}
#)

# Generate .so
add_library(Qtoken SHARED $<TARGET_OBJECTS:VIN_LIB> )

# Add extra libs for Android arch
target_link_libraries(Qtoken PRIVATE
        ${LIB_LINK_LIST}
        log
        android
)

# Specify the include directories for the VIN_LIB
target_include_directories(VIN_LIB PUBLIC
    ${PROJECT_SOURCE_DIR}/include
    ${AFF3CTPATH}
    ${AFF3CTPATH}/aff3ct
    ${AFF3CTPATH}/MIPP
    ${AFF3CTPATH}/rang
    ${INCLUDES_DIR}/kademlia/
    ${INCLUDES_DIR}/poco/
    ${INCLUDES_DIR}/openssl/
)

#install(TARGETS VIN_LIB Qtoken
#        PUBLIC_HEADER DESTINATION include
#        ARCHIVE DESTINATION lib
#        LIBRARY DESTINATION lib
#        RUNTIME DESTINATION bin
#        INCLUDES DESTINATION include
#)
