
package com.atakmap.android.contentservices.ogc;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;

import org.gdal.ogr.DataSource;
import org.gdal.ogr.Layer;
import org.gdal.ogr.ogr;

import com.atakmap.android.contentservices.Service;
import com.atakmap.android.contentservices.ServiceListing;
import com.atakmap.android.contentservices.ServiceQuery;
import com.atakmap.android.contentservices.ServiceType;
import com.atakmap.coremap.log.Log;

public final class WFSQuery implements ServiceQuery {

    private final static int[] COLOR_ARRAY = new int[] {
            0xFF00FF00,
            0xFFFFFF00,
            0xFFFF00FF,
            0xFF0000FF,
            0xFF00FFFF,
            0xFFFF0000,
            0xFF007F00,
            0xFF7FFF00,
            0xFF7F00FF,
            0xFF00FFFF,
            0xFF7F0000,
            0xFFFF7F00,
            0xFFFF007F,
            0xFF007FFF,
            0xFF7F7F00,
            0xFF7F007F,
            0xFF007F7F,
            0xFF7F7F7F,
    };

    private final static int DEFAULT_WIDTH = 2;

    private final static String TAG = "WFSQuery";

    public final static ServiceQuery INSTANCE = new WFSQuery();

    private WFSQuery() {
    }

    @Override
    public String getName() {
        return "WFS";
    }

    @Override
    public int getPriority() {
        return 2;
    }

    @Override
    public ServiceListing queryServices(String url) {
        DataSource wfs = null;
        try {
            if (!url.contains("://"))
                url = "http://" + url;

            // XXX - observing GEOSERVER rejecting 2.0.0 requests due to
            //       parameter names on URLs generated by GDAL. URLs appear to
            //       be valid. See
            // http://giswebservices.massgis.state.ma.us/geoserver/wms?SERVICE=WFS&REQUEST=GetCapabilities
            //       And request
            // http://giswebservices.massgis.state.ma.us/geoserver/wms?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&TYPENAMES=massgis:GISDATA.AUL_PT&STARTINDEX=0&COUNT=1400000
            //       And Geoserver notes here
            // http://docs.geoserver.org/stable/en/user/services/wfs/basics.html
            if (url.contains("version=") && !url.contains("version=1.")) {
                url = url.replaceFirst("version\\=\\d+\\.\\d+(\\.\\d+)?",
                        "version=1.1.0");
            } else if (!url.contains("version=")) {
                if (url.indexOf('?') > 0)
                    url = url + "&version=1.1.0";
                else
                    url = url + "?version=1.1.0";
            }

            wfs = ogr.Open("WFS:" + url, false);
            if (wfs == null) {
                return null;
            }

            Set<Service> layers = new HashSet<>();

            for (int i = 0; i < wfs.GetLayerCount(); i++) {
                Layer layer = wfs.GetLayer(i);
                if (layer == null)
                    continue;

                java.util.Hashtable layerht = layer.GetMetadata_Dict();
                String title = (String) layerht.get("TITLE");
                if (title == null)
                    title = layer.GetName();

                // XXX - feature column name discovery
                layers.add(new WFSService(title, url, layer.GetName(),
                        COLOR_ARRAY[i % COLOR_ARRAY.length]));
            }

            if (layers.isEmpty())
                return null;

            java.util.Hashtable ht = wfs.GetMetadata_Dict();

            String title = (String) ht.get("TITLE");
            if (title == null)
                title = url;

            ServiceListing retval = new ServiceListing();
            retval.serverType = "WFS";
            retval.title = title;
            retval.services = layers;
            return retval;
        } catch (Exception e) {
            Log.w(TAG, "Failed to access WFS server: " + url);
            return null;
        } finally {
            if (wfs != null)
                wfs.delete();
        }
    }

    private static class WFSService implements Service {

        private String name;
        private String url;
        private String layer;
        private int color;

        WFSService(String name, String url, String layer, int color) {
            this.name = name;
            this.url = url;
            this.layer = layer;
            this.color = color;
        }

        @Override
        public ServiceType getType() {
            return ServiceType.Feature;
        }

        @Override
        public String getName() {
            return this.name;
        }

        @Override
        public String getDescription() {
            return null;
        }

        @Override
        public void generateConfigFile(OutputStream sink) throws IOException {
            StringBuilder colorString = new StringBuilder();
            int c;

            c = (color >> 24) & 0xFF;
            if (c < 16)
                colorString.append(0);
            colorString.append(Integer.toString(c, 16).toUpperCase(Locale.US));
            c = (color >> 16) & 0xFF;
            if (c < 16)
                colorString.append(0);
            colorString.append(Integer.toString(c, 16).toUpperCase(Locale.US));
            c = (color >> 8) & 0xFF;
            if (c < 16)
                colorString.append(0);
            colorString.append(Integer.toString(c, 16).toUpperCase(Locale.US));
            c = color & 0xFF;
            if (c < 16)
                colorString.append(0);
            colorString.append(Integer.toString(c, 16).toUpperCase(Locale.US));

            PrintStream out = new PrintStream(sink);
            out.println("<takWfsConfig>");
            out.println("    <uri>" + url + "</uri>");
            out.println("    <displayname>" + name + "</displayname>");
            out.println("    <layer>");
            out.println("        <remotename>" + layer + "</remotename>");
            out.println("        <displayname>" + name + "</displayname>");
            out.println("        <feature>");
            out.println("            <styles>");
            out.println("                <pointstyle>");
            out.println("                    <color>" + colorString
                    + "</color>");
            out.println("                </pointstyle>");
            out.println("                <linestyle>");
            out.println("                    <strokestyle>");
            out.println("                        <color>" + colorString
                    + "</color>");
            out.println("                        <width>" + DEFAULT_WIDTH
                    + "</width>");
            out.println("                    </strokestyle>");
            out.println("                </linestyle>");
            out.println("                <polygonstyle>");
            out.println("                    <strokestyle>");
            out.println("                        <color>" + colorString
                    + "</color>");
            out.println("                        <width>" + DEFAULT_WIDTH
                    + "</width>");
            out.println("                    </strokestyle>");
            out.println("                </polygonstyle>");
            out.println("            </styles>");
            out.println("        </feature>");
            out.println("    </layer>");
            out.println("</takWfsConfig>");
        }
    }
}
