 buildscript {
    repositories {
        jcenter()
        google()
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
    }
 }

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
        jcenter()
    }
}


apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "29.0.2"
    ndkVersion "12.1.2977051"

    defaultConfig {
        minSdkVersion 21
        ndk {
            moduleName 'certdb'
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
        }
    }

    externalNativeBuild.ndkBuild.path = 'src/main/cpp/Android.mk'

    defaultConfig {
        minSdkVersion 21
    }

    flavorDimensions "application"

    productFlavors {
        civ {
            dimension "application"
        }
        civSmall {
            dimension "application"
        }
    }

    buildTypes {
        all {
        }

        release {
        }

        debug {
            testCoverageEnabled (project.hasProperty('coverage') ? true : false)
        }
    }

    sourceSets {
        main {
        }

        // Move the tests to tests/java, tests/res, etc...
        //instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

// Love this quote from StackOverflow
// Ahh, looks like you have to move the dependencies block below the android block. How intuitive.
dependencies {
    api project(':MapCoreInterfaces:lib')
}

clean {
    // JNI headers
    doLast {
        def javah_properties = new File(project.projectDir, 'src/main/cpp/javah.properties')
        if (javah_properties.isFile() && javah_properties.canRead()) {
            def prop = new Properties()
            def reader = javah_properties.newReader()
            try {
                prop.load(reader)
            } finally {
                reader.close()
            }

            prop.each { headerFile, ignored ->
                delete 'src/main/cpp/' + headerFile
            }
        } else {
            logger.warn('javah.properties is missing')
        }
    }
}

static def getValueFromPropertiesFile(File propFile, String key) {
    if(!propFile.isFile() || !propFile.canRead())
        return null
    def prop = new Properties()
    def reader = propFile.newReader()
    try {
        prop.load(reader)
    } finally {
        reader.close()
    }
    return prop.get(key)
}

// JNI header generation
android.libraryVariants.all { variant ->
    task "generate${variant.name.capitalize()}JniHeaders"(dependsOn: ["compile${variant.name.capitalize()}JavaWithJavac"]) {
        // param1 = header file name (including .h)
        // param2 = class name (as string) or class names (as string list)
        ext.javah = { param1, param2 ->
            exec {
                // configure classpath used by javah
                def atakmapengine_classpath = "build/intermediates/javac/" + variant.name + "/classes"
                def mapcoreinterfaces_classpath = (new File(project(":MapCoreInterfaces:lib").projectDir,  "build/intermediates/javac/" + variant.name + "/classes")).toString()
                def android_classpath = android.sdkDirectory.path + "/platforms/" + android.compileSdkVersion + "/android.jar"
                def javah_classpath =
                        atakmapengine_classpath + File.pathSeparator +
                        (new File(projectDir, "libs/gdal.jar")).toString() + File.pathSeparator +
                        mapcoreinterfaces_classpath + File.pathSeparator +
                        android_classpath
                // the output file
                def output_file = (new File(projectDir, "src/main/cpp/" + param1)).toString()

                // create command line args
                ArrayList<String> clargs = ['javah', '-classpath', "${javah_classpath}", '-o', output_file]
                clargs.addAll(param2)

                // execute javah
                commandLine clargs
            }
        }

        doLast {
            def javah_properties = new File(project.projectDir, 'src/main/cpp/javah.properties')
            if(!javah_properties.isFile() || !javah_properties.canRead()) {
                logger.warn('javah.properties is missing')
            } else {
                def prop = new Properties()
                def reader = javah_properties.newReader()
                try {
                    prop.load(reader)
                } finally {
                    reader.close()
                }

                prop.each { key, val ->
                    javah(key, val.split(', '))
                }
            }
        }
    }
}

android.libraryVariants.all { variant ->
    // NDK build depends on external dependency unpack
    tasks.getByName("externalNativeBuild${variant.name.capitalize()}").dependsOn(':ATAKMapEngine:lib:installDepends')
    // NDK build depends on JNI header generation
    tasks.getByName("externalNativeBuild${variant.name.capitalize()}").dependsOn("generate${variant.name.capitalize()}JniHeaders")
}

