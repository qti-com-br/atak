package plugins.host.context;

import java.io.InputStream;

import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.content.res.ColorStateList;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;

/**
 * Special {@link Resources} impl that will first lookup resources in the
 * {@link PluginContext#getPluginContext()} and fallback on the
 * {@link PluginContext#getHostContext()}
 * 
 * 
 * @author mriley
 */
public final class PluginResources extends Resources {

    private final Context pluginContext;
    private final Context hostContext;

    public PluginResources(PluginContext pluginContext, AssetManager assets, DisplayMetrics metrics, Configuration config) {
        super(assets, metrics, config);
        this.pluginContext = pluginContext.getPluginContext();
        this.hostContext = pluginContext.getHostContext();
    }    
    
    /**
     * Return the string value associated with a particular resource ID.  The
     * returned object will be a String if this is a plain string; it will be
     * some other type of CharSequence if it is styled.
     * {@more}
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return CharSequence The string data associated with the resource, plus
     *         possibly styled text information.
     */
    public CharSequence getText(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getText(id);                
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getText(id);
        }
    }

    /**
     * Return the character sequence associated with a particular resource ID for a particular
     * numerical quantity.
     *
     * <p>See <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String
     * Resources</a> for more on quantity strings.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @param quantity The number used to get the correct string for the current language's
     *           plural rules.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return CharSequence The string data associated with the resource, plus
     *         possibly styled text information.
     */
    public CharSequence getQuantityText(int id, int quantity) throws NotFoundException {
        try {
            return pluginContext.getResources().getQuantityText(id, quantity);                
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getQuantityText(id, quantity);                
        }
    }

    /**
     * Return the string value associated with a particular resource ID.  It
     * will be stripped of any styled text information.
     * {@more}
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return String The string data associated with the resource,
     * stripped of styled text information.
     */
    public String getString(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getString(id);                
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getString(id);                
        }
    }


    /**
     * Return the string value associated with a particular resource ID,
     * substituting the format arguments as defined in {@link java.util.Formatter}
     * and {@link java.lang.String#format}. It will be stripped of any styled text
     * information.
     * {@more}
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *           
     * @param formatArgs The format arguments that will be used for substitution.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return String The string data associated with the resource,
     * stripped of styled text information.
     */
    public String getString(int id, Object... formatArgs) throws NotFoundException {
        try {
            return pluginContext.getResources().getString(id, formatArgs);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getString(id, formatArgs);
        }
    }

    /**
     * Return the string value associated with a particular resource ID for a particular
     * numerical quantity, substituting the format arguments as defined in
     * {@link java.util.Formatter} and {@link java.lang.String#format}. It will be
     * stripped of any styled text information.
     * {@more}
     *
     * <p>See <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String
     * Resources</a> for more on quantity strings.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @param quantity The number used to get the correct string for the current language's
     *           plural rules.
     * @param formatArgs The format arguments that will be used for substitution.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return String The string data associated with the resource,
     * stripped of styled text information.
     */
    public String getQuantityString(int id, int quantity, Object... formatArgs)
            throws NotFoundException {
        try {
            return pluginContext.getResources().getQuantityString(id, quantity, formatArgs);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getQuantityString(id, quantity, formatArgs);                
        }
    }

    /**
     * Return the styled text array associated with a particular resource ID.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return The styled text array associated with the resource.
     */
    public CharSequence[] getTextArray(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getTextArray(id);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getTextArray(id);                
        }
    }

    /**
     * Return the string array associated with a particular resource ID.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return The string array associated with the resource.
     */
    public String[] getStringArray(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getStringArray(id);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getStringArray(id);                
        }
    }

    /**
     * Return the int array associated with a particular resource ID.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return The int array associated with the resource.
     */
    public int[] getIntArray(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getIntArray(id);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getIntArray(id);
        }
    }

    /**
     * Return an array of heterogeneous values.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return Returns a TypedArray holding an array of the array values.
     * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}
     * when done with it.
     */
    public TypedArray obtainTypedArray(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().obtainTypedArray(id);                
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().obtainTypedArray(id);
        }
    }

    /**
     * Retrieve a dimensional for a particular resource ID.  Unit 
     * conversions are based on the current {@link DisplayMetrics} associated
     * with the resources.
     * 
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * 
     * @return Resource dimension value multiplied by the appropriate 
     * metric.
     * 
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @see #getDimensionPixelOffset
     * @see #getDimensionPixelSize
     */
    public float getDimension(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getDimension(id);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getDimension(id);
        }
    }

    /**
     * Retrieve a dimensional for a particular resource ID for use
     * as an offset in raw pixels.  This is the same as
     * {@link #getDimension}, except the returned value is converted to
     * integer pixels for you.  An offset conversion involves simply
     * truncating the base value to an integer.
     * 
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * 
     * @return Resource dimension value multiplied by the appropriate 
     * metric and truncated to integer pixels.
     * 
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @see #getDimension
     * @see #getDimensionPixelSize
     */
    public int getDimensionPixelOffset(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getDimensionPixelOffset(id);                
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getDimensionPixelOffset(id);                
        }
    }

    /**
     * Retrieve a dimensional for a particular resource ID for use
     * as a size in raw pixels.  This is the same as
     * {@link #getDimension}, except the returned value is converted to
     * integer pixels for use as a size.  A size conversion involves
     * rounding the base value, and ensuring that a non-zero base value
     * is at least one pixel in size.
     * 
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * 
     * @return Resource dimension value multiplied by the appropriate 
     * metric and truncated to integer pixels.
     *  
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @see #getDimension
     * @see #getDimensionPixelOffset
     */
    public int getDimensionPixelSize(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getDimensionPixelSize(id);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getDimensionPixelSize(id);
        }
    }

    /**
     * Retrieve a fractional unit for a particular resource ID.
     * 
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @param base The base value of this fraction.  In other words, a 
     *             standard fraction is multiplied by this value.
     * @param pbase The parent base value of this fraction.  In other 
     *             words, a parent fraction (nn%p) is multiplied by this
     *             value.
     * 
     * @return Attribute fractional value multiplied by the appropriate 
     * base value.
     *  
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public float getFraction(int id, int base, int pbase) {
        try {
            return pluginContext.getResources().getFraction(id, base, pbase);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getFraction(id, base, pbase);
        }
    }
    
    /**
     * Return a drawable object associated with a particular resource ID.
     * Various types of objects will be returned depending on the underlying
     * resource -- for example, a solid color, PNG image, scalable image, etc.
     * The Drawable API hides these implementation details.
     * 
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * 
     * @return Drawable An object that can be used to draw this resource.
     */
    public Drawable getDrawable(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getDrawable(id);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getDrawable(id);
        }
    }

    /**
     * Return a color integer associated with a particular resource ID.
     * If the resource holds a complex
     * {@link android.content.res.ColorStateList}, then the default color from
     * the set is returned.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return Returns a single color value in the form 0xAARRGGBB.
     */
    public int getColor(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getColor(id);                
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getColor(id);                
        }
    }

    /**
     * Return a color state list associated with a particular resource ID.  The
     * resource may contain either a single raw color value, or a complex
     * {@link android.content.res.ColorStateList} holding multiple possible colors.
     *
     * @param id The desired resource identifier of a {@link ColorStateList},
     *        as generated by the aapt tool. This integer encodes the package, type, and resource
     *        entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return Returns a ColorStateList object containing either a single
     * solid color or multiple colors that can be selected based on a state.
     */
    public ColorStateList getColorStateList(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getColorStateList(id);                
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getColorStateList(id);
        }
    }

    /**
     * Return a boolean associated with a particular resource ID.  This can be
     * used with any integral resource value, and will return true if it is
     * non-zero.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return Returns the boolean value contained in the resource.
     */
    public boolean getBoolean(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getBoolean(id);                
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getBoolean(id);
        }
    }

    /**
     * Return an integer associated with a particular resource ID.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     * @return Returns the integer value contained in the resource.
     */
    public int getInteger(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getInteger(id);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getInteger(id);
        }
    }

    /**
     * Return an XmlResourceParser through which you can read a view layout
     * description for the given resource ID.  This parser has limited
     * functionality -- in particular, you can't change its input, and only
     * the high-level events are available.
     * 
     * <p>This function is really a simple wrapper for calling
     * {@link #getXml} with a layout resource.
     * 
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * 
     * @return A new parser object through which you can read
     *         the XML data.
     *         
     * @see #getXml
     */
    public XmlResourceParser getLayout(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getLayout(id);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getLayout(id);
        }
    }

    /**
     * Return an XmlResourceParser through which you can read an animation
     * description for the given resource ID.  This parser has limited
     * functionality -- in particular, you can't change its input, and only
     * the high-level events are available.
     * 
     * <p>This function is really a simple wrapper for calling
     * {@link #getXml} with an animation resource.
     * 
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * 
     * @return A new parser object through which you can read
     *         the XML data.
     *         
     * @see #getXml
     */
    public XmlResourceParser getAnimation(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getAnimation(id);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getAnimation(id);
        }
    }

    /**
     * Return an XmlResourceParser through which you can read a generic XML
     * resource for the given resource ID.
     * 
     * <p>The XmlPullParser implementation returned here has some limited
     * functionality.  In particular, you can't change its input, and only
     * high-level parsing events are available (since the document was
     * pre-parsed for you at build time, which involved merging text and
     * stripping comments).
     * 
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * 
     * @return A new parser object through which you can read
     *         the XML data.
     *         
     * @see android.util.AttributeSet
     */
    public XmlResourceParser getXml(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().getXml(id);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getXml(id);
        }
    }

    /**
     * Open a data stream for reading a raw resource.  This can only be used
     * with resources whose value is the name of an asset file -- that is, it can be
     * used to open drawable, sound, and raw resources; it will fail on string
     * and color resources.
     *
     * @param id The resource identifier to open, as generated by the appt tool.
     * @param value The TypedValue object to hold the resource information.
     *
     * @return InputStream Access to the resource data.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public InputStream openRawResource(int id, TypedValue value) throws NotFoundException {
        try {
            return pluginContext.getResources().openRawResource(id, value);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().openRawResource(id, value);                
        }
    }

    /**
     * Open a file descriptor for reading a raw resource.  This can only be used
     * with resources whose value is the name of an asset files -- that is, it can be
     * used to open drawable, sound, and raw resources; it will fail on string
     * and color resources.
     * 
     * <p>This function only works for resources that are stored in the package
     * as uncompressed data, which typically includes things like mp3 files
     * and png images.
     * 
     * @param id The resource identifier to open, as generated by the appt
     *           tool.
     * 
     * @return AssetFileDescriptor A new file descriptor you can use to read
     * the resource.  This includes the file descriptor itself, as well as the
     * offset and length of data where the resource appears in the file.  A
     * null is returned if the file exists but is compressed.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * 
     */
    public AssetFileDescriptor openRawResourceFd(int id) throws NotFoundException {
        try {
            return pluginContext.getResources().openRawResourceFd(id);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().openRawResourceFd(id);
        }
    }

    /**
     * Return the raw data associated with a particular resource ID.
     * 
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @param outValue Object in which to place the resource data.
     * @param resolveRefs If true, a resource that is a reference to another
     *                    resource will be followed so that you receive the
     *                    actual final resource data.  If false, the TypedValue
     *                    will be filled in with the reference itself.
     *
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     *
     */
    public void getValue(int id, TypedValue outValue, boolean resolveRefs) throws NotFoundException {
        try {
            pluginContext.getResources().getValue(id, outValue, resolveRefs);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + id + " in plugin context.  Attempting host context...", nnfe);
            hostContext.getResources().getValue(id, outValue, resolveRefs);
        }
    }

    /**
     * Retrieve a set of basic attribute values from an AttributeSet, not
     * performing styling of them using a theme and/or style resources.
     * 
     * @param set The current attribute values to retrieve.
     * @param attrs The specific attributes to be retrieved.
     * @return Returns a TypedArray holding an array of the attribute values.
     * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}
     * when done with it.
     * 
     * @see Theme#obtainStyledAttributes(AttributeSet, int[], int, int)
     */
    public TypedArray obtainAttributes(AttributeSet set, int[] attrs) {
        try {
            return pluginContext.getResources().obtainAttributes(set, attrs);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find attributes in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().obtainAttributes(set, attrs);
        }
    }
    
    /**
     * Return a resource identifier for the given resource name.  A fully
     * qualified resource name is of the form "package:type/entry".  The first
     * two components (package and type) are optional if defType and
     * defPackage, respectively, are specified here.
     * 
     * <p>Note: use of this function is discouraged.  It is much more
     * efficient to retrieve resources by identifier than by name.
     * 
     * @param name The name of the desired resource.
     * @param defType Optional default resource type to find, if "type/" is
     *                not included in the name.  Can be null to require an
     *                explicit type.
     * @param defPackage Optional default package to find, if "package:" is
     *                   not included in the name.  Can be null to require an
     *                   explicit package.
     * 
     * @return int The associated resource identifier.  Returns 0 if no such
     *         resource was found.  (0 is not a valid resource ID.)
     */
    public int getIdentifier(String name, String defType, String defPackage) {
        try {
            return pluginContext.getResources().getIdentifier(name, defType, defPackage);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + name + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getIdentifier(name, defType, defPackage);
        }
    }

    /**
     * Return the full name for a given resource identifier.  This name is
     * a single string of the form "package:type/entry".
     * 
     * @param resid The resource identifier whose name is to be retrieved.
     * 
     * @return A string holding the name of the resource.
     * 
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * 
     * @see #getResourcePackageName
     * @see #getResourceTypeName
     * @see #getResourceEntryName
     */
    public String getResourceName(int resid) throws NotFoundException {
        try {
            return pluginContext.getResources().getResourceName(resid);                
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + resid + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getResourceName(resid);                
        }
    }
    
    /**
     * Return the package name for a given resource identifier.
     * 
     * @param resid The resource identifier whose package name is to be
     * retrieved.
     * 
     * @return A string holding the package name of the resource.
     * 
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * 
     * @see #getResourceName
     */
    public String getResourcePackageName(int resid) throws NotFoundException {
        try {
            return pluginContext.getResources().getResourcePackageName(resid);                
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + resid + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getResourcePackageName(resid);                
        }
    }
    
    /**
     * Return the type name for a given resource identifier.
     * 
     * @param resid The resource identifier whose type name is to be
     * retrieved.
     * 
     * @return A string holding the type name of the resource.
     * 
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * 
     * @see #getResourceName
     */
    public String getResourceTypeName(int resid) throws NotFoundException {
        try {
            return pluginContext.getResources().getResourceTypeName(resid);
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + resid + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getResourceTypeName(resid);                
        }
    }
    
    /**
     * Return the entry name for a given resource identifier.
     * 
     * @param resid The resource identifier whose entry name is to be
     * retrieved.
     * 
     * @return A string holding the entry name of the resource.
     * 
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * 
     * @see #getResourceName
     */
    public String getResourceEntryName(int resid) throws NotFoundException {
        try {
            return pluginContext.getResources().getResourceEntryName(resid);                
        } catch ( NotFoundException nnfe ) {
            Log.d(PluginContext.TAG, "Failed to find " + resid + " in plugin context.  Attempting host context...", nnfe);
            return hostContext.getResources().getResourceEntryName(resid);
        }
    }        
}
