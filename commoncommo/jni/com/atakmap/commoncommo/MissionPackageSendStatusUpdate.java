package com.atakmap.commoncommo;

/**
 * A bundle of information about an ongoing outbound Mission Package transfer
 * to one or more Contacts, or a TAK server.
 */
public class MissionPackageSendStatusUpdate {
    /**
     * identifier that uniquely identifies the transfer - matches
     * the id returned from Commo's sendMissionPackageInit()
     */
    public final int transferId;
    /**
     * Recipient to which this update pertains.
     * Will be null when sending to a TAK server.
     */
    public final Contact recipient;
    /**
     * The status of the transfer to this recipient. Can be one of:
     * FINISHED_SUCCESS,
     * FINISHED_TIMED_OUT,
     * FINISHED_FAILED,
     * FINISHED_DISABLED_LOCALLY,
     * SERVER_UPLOAD_PENDING,
     * SERVER_UPLOAD_IN_PROGRESS,
     * SERVER_UPLOAD_SUCCESS,
     * SERVER_UPLOAD_FAILED
     * For sends to one or more Contacts (not a TAK server), can also
     * be one of:
     * ATTEMPT_IN_PROGRESS,
     * FINISHED_CONTACT_GONE,
     * 
     * FINISHED_CONTACT_GONE indicates the contact disappeared between the 
     * initiation of the transfer and when we could actually notify
     * the Contact that the file was ready for transfer.
     * FINISHED_DISABLED_LOCALLY indicates that a transfer had been started,
     * but the local mission package setup was changed in a way that was
     * incompatible with the started transfer (server transfer and
     * server transfers were disabled, peer to peer transfer and the local
     * web server port was changed or disabled).
     *
     * Any FINISHED_* code should be considered the final update for this
     * transfer *to the specified recipient*. No further updates will
     * come for the recipient for this transfer.
     * 
     * If the transfer is to a server, or if a destination Contact is
     * reachable on a server, the SERVER_* status events may be seen to report
     * progress of making the MP available on the server.
     * SERVER_UPLOAD_PENDING will be seen shortly after the start of the
     * transfer if the upload is required; this will continue until
     * the upload actually begins.
     * SERVER_UPLOAD_IN_PROGRESS status events will report 
     * start and progress of the upload.
     * The upload ends with either SERVER_UPLOAD_SUCCESS or
     * SERVER_UPLOAD_FAILED.
     * Successful uploads will shortly post a FINISHED_SUCCESS status
     * update for sends
     * to a server, or an ATTEMPT_IN_PROGRESS (see below) for a send to
     * a server-reachable Contact.
     * Failed uploads will shortly post a FINISHED_* status.
     *
     * For transfers to contacts not reachable via TAK servers, 
     * the first status report will generally be ATTEMPT_IN_PROGRESS which
     * indicates the Contact has been notified of the MP availability and
     * we are awaiting them to fetch it and send us an acknowledgement (or
     * failure report).
     */
    public final MissionPackageTransferStatus status;
    /**
     * For FINISHED_* events, this is the "reason" string returned by the
     * recipient; which gives more detail on the transfer results.
     * It is always non-null (but possibly empty) for FINISHED_* events
     * generated by a (n)ack response from the receiver.
     * For FINISHED_* events caused by local error conditions,
     * this will be null.
     * For SERVER_UPLOAD_SUCCESS, this will contain the URL of the
     * file on the server.
     * For SERVER_UPLOAD_FAILED, this will contain error details on why
     * the upload failed.
     * For other status codes, this will be null.
     */
    public final String additionalDetail;
    
    /**
     * For status == SERVER_UPLOAD_*, 
     * indicates the total number of bytes uploaded so far.
     * For status == FINISHED_SUCCESS, on a send to a contact
     * this contains the # of bytes the remote recipient says it received
     * or 0 if unknown; on sends to a TAK server, contains the #
     * of bytes transferred (this will be 0 if the file was
     * already on the server).
     * Will be 0 for other status codes.
     */
    public final long totalBytesTransferred;


    MissionPackageSendStatusUpdate(int transferId, Contact receiver,
                                       MissionPackageTransferStatus status,
                                       String detail,
                                       long bytesTransferred)
    {
        this.transferId = transferId;
        this.recipient = receiver;
        this.status = status;
        this.additionalDetail = detail;
        this.totalBytesTransferred = bytesTransferred;
    }
    
    MissionPackageSendStatusUpdate(int transferId, String receiverUID,
                                       MissionPackageTransferStatus status,
                                       String detail,
                                       long bytesTransferred)
    {
        this(transferId, receiverUID == null ? null :
                                               new Contact(receiverUID),
             status, detail, bytesTransferred);
    }
}
