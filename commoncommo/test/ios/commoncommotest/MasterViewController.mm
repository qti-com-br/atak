//
//  MasterViewController.m
//  commoncommotest
//
//  Created by Jeff Downs on 11/16/15.
//  Copyright Â© 2015 Jeff Downs. All rights reserved.
//

#import "MasterViewController.h"
#import "DetailViewController.h"

#import <commoncommo/commoncommo.h>
#import <sys/socket.h>
#import <sys/types.h>
#import <string>
#import <map>
#import <ifaddrs.h>
#import <net/if_dl.h>


// Define this to go directly against the C++ native and not use obj-c bindings
// Not recently tested and may need changing the link params
//#define NATIVE_DIRECT 1

// Define this to test TAK server as ssl; LAN support supercedes this
#define TEST_SSL 1

// Define this to test LAN-based support, no TAK server
//#define TEST_LAN 1

// If neither of the above TEST_XXX is defined, non-ssl TAK server connection will be tested



namespace {

const uint8_t certData[] = {
    0x30, 0x82, 0x0a, 0xf8, 0x02, 0x01, 0x03, 0x30,
    0x82, 0x0a, 0xb2, 0x06, 0x09, 0x2a, 0x86, 0x48,
    0x86, 0xf7, 0x0d, 0x01, 0x07, 0x01, 0xa0, 0x82,
    0x0a, 0xa3, 0x04, 0x82, 0x0a, 0x9f, 0x30, 0x82,
    0x0a, 0x9b, 0x30, 0x82, 0x03, 0x20, 0x06, 0x09,
    0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07,
    0x01, 0xa0, 0x82, 0x03, 0x11, 0x04, 0x82, 0x03,
    0x0d, 0x30, 0x82, 0x03, 0x09, 0x30, 0x82, 0x03,
    0x05, 0x06, 0x0b, 0x2a, 0x86, 0x48, 0x86, 0xf7,
    0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x02, 0xa0, 0x82,
    0x02, 0xb2, 0x30, 0x82, 0x02, 0xae, 0x30, 0x28,
    0x06, 0x0a, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
    0x01, 0x0c, 0x01, 0x03, 0x30, 0x1a, 0x04, 0x14,
    0x20, 0x7e, 0x87, 0x6b, 0x10, 0xf3, 0x5e, 0x8e,
    0xad, 0xc2, 0xcd, 0x8f, 0x9b, 0x8d, 0xdf, 0x09,
    0xc8, 0x94, 0xea, 0xbc, 0x02, 0x02, 0x04, 0x00,
    0x04, 0x82, 0x02, 0x80, 0x00, 0x2c, 0x31, 0x4b,
    0xee, 0xe4, 0xed, 0x96, 0x29, 0x70, 0x11, 0xfc,
    0x0d, 0xab, 0x0b, 0x76, 0xb6, 0x75, 0x2d, 0x9f,
    0x09, 0x34, 0x12, 0x73, 0x6f, 0xf9, 0xc8, 0x96,
    0xff, 0xc7, 0x01, 0xe9, 0x0f, 0xdd, 0x7d, 0x1b,
    0x75, 0xa1, 0xa9, 0x56, 0xbb, 0x7a, 0x8f, 0x00,
    0x79, 0xf2, 0xcb, 0xa9, 0x07, 0x52, 0x70, 0xab,
    0xd5, 0xaa, 0x3e, 0x6e, 0x3c, 0x2c, 0x1d, 0x25,
    0x7d, 0x9a, 0x43, 0x7f, 0x8d, 0x15, 0xe4, 0x19,
    0x7f, 0x64, 0x98, 0xa1, 0xfa, 0xeb, 0x9d, 0x6e,
    0x43, 0xa0, 0x16, 0xa4, 0xb9, 0xef, 0x92, 0x32,
    0xbe, 0x1a, 0x10, 0x42, 0xf4, 0xbe, 0x18, 0x14,
    0xd0, 0x40, 0xd0, 0x2f, 0x93, 0xfd, 0xd3, 0xce,
    0x3d, 0x84, 0xa2, 0xce, 0x0a, 0xf8, 0x8e, 0x5d,
    0xa7, 0x62, 0x01, 0x72, 0x20, 0xb6, 0xa6, 0x58,
    0xb1, 0xf0, 0xbe, 0x43, 0x86, 0x1a, 0xd9, 0xb6,
    0x82, 0x8a, 0x85, 0x96, 0x67, 0xbb, 0xb3, 0xe0,
    0x16, 0x9f, 0xa8, 0xcd, 0xc5, 0xfc, 0x10, 0x4c,
    0x3c, 0x43, 0x87, 0xcb, 0xab, 0xba, 0x6f, 0x85,
    0x6c, 0x9f, 0x26, 0x5e, 0x01, 0xdc, 0xed, 0x27,
    0xbd, 0x47, 0xd2, 0x3a, 0xe8, 0xf2, 0x74, 0x7e,
    0xb1, 0x99, 0x1f, 0x3a, 0x50, 0xb2, 0x8d, 0x69,
    0xc2, 0xc3, 0x3d, 0x46, 0xf4, 0x78, 0x41, 0xa0,
    0x08, 0xfb, 0xdf, 0xc8, 0xbe, 0x67, 0xe6, 0x2c,
    0x68, 0x54, 0x16, 0x5c, 0x02, 0x9d, 0xe3, 0xf6,
    0xc4, 0x1f, 0x7c, 0x54, 0xa1, 0x1e, 0xe9, 0x20,
    0x5e, 0x61, 0x8e, 0xc9, 0x56, 0x2b, 0x8a, 0xf2,
    0xd2, 0x7c, 0x6b, 0xbb, 0x7c, 0x1d, 0x7e, 0x77,
    0x48, 0x6c, 0x0c, 0x16, 0x73, 0xd0, 0x7a, 0xdc,
    0x24, 0x6b, 0xda, 0xef, 0x9c, 0xa7, 0x49, 0x10,
    0xcc, 0x4f, 0x45, 0xdf, 0x01, 0x4d, 0x21, 0x13,
    0x27, 0x07, 0x77, 0x6f, 0xfa, 0xf3, 0x5e, 0x8e,
    0x9c, 0x63, 0xe3, 0xcc, 0xcf, 0x5f, 0x7c, 0xa7,
    0xe9, 0xbb, 0x08, 0xd1, 0x56, 0x3b, 0xd9, 0x74,
    0xdd, 0x9b, 0x8d, 0x4c, 0x1f, 0xd3, 0x34, 0x8d,
    0x32, 0x64, 0x1a, 0x75, 0xe6, 0x46, 0xc2, 0xdb,
    0x08, 0xeb, 0xd8, 0x1d, 0x2c, 0xb5, 0x2a, 0x72,
    0x72, 0x68, 0x94, 0x76, 0x1a, 0xd6, 0xde, 0x0c,
    0xa0, 0x81, 0x3d, 0xb3, 0x90, 0x1d, 0xca, 0x87,
    0x61, 0xdc, 0x39, 0x29, 0xee, 0xa8, 0xe6, 0x22,
    0x5f, 0xd7, 0x1f, 0xa9, 0xb1, 0x66, 0x6f, 0xbc,
    0x75, 0x94, 0x38, 0x02, 0x64, 0xab, 0x68, 0x91,
    0x4e, 0x43, 0xbb, 0xfc, 0x4e, 0x58, 0x55, 0x48,
    0xa6, 0xfc, 0x45, 0xf4, 0x3e, 0xea, 0xa6, 0x98,
    0xdc, 0x3d, 0x3e, 0xb5, 0x57, 0xa9, 0x0d, 0x0a,
    0x4c, 0x7f, 0x0f, 0xf7, 0xa6, 0xbc, 0x41, 0x97,
    0x04, 0xe0, 0xeb, 0x6b, 0x43, 0xab, 0xec, 0xb2,
    0x24, 0x59, 0x75, 0x1a, 0x40, 0x37, 0xa7, 0xc6,
    0x58, 0x51, 0x48, 0x64, 0x76, 0xcd, 0xa9, 0x7f,
    0xd6, 0xf6, 0x0f, 0xe0, 0x63, 0x7a, 0x03, 0xbb,
    0x68, 0x31, 0x74, 0xb7, 0x17, 0x7d, 0x76, 0x93,
    0xb5, 0x67, 0xf9, 0x38, 0x4d, 0xfd, 0xa4, 0x36,
    0x88, 0xd8, 0xa6, 0x7f, 0x7c, 0xcb, 0x6d, 0x93,
    0x01, 0x75, 0x95, 0x65, 0xf7, 0x01, 0x4b, 0x0c,
    0x40, 0x35, 0x15, 0x1a, 0x8e, 0xa9, 0xf8, 0xd2,
    0xdf, 0x06, 0xb2, 0x3f, 0x31, 0x35, 0x7c, 0xde,
    0xb5, 0xdf, 0xa7, 0x8b, 0x9f, 0x96, 0x9d, 0xf3,
    0xf5, 0x46, 0x7e, 0xf9, 0x87, 0x26, 0x4f, 0x92,
    0x5b, 0x3f, 0x7f, 0x6b, 0xa0, 0xa9, 0x3f, 0x96,
    0xa6, 0x13, 0xae, 0x66, 0x95, 0xd5, 0x24, 0x9a,
    0xea, 0xc6, 0xcc, 0x4a, 0x7f, 0xf6, 0x51, 0x8c,
    0x9f, 0xec, 0x03, 0x43, 0x56, 0xa2, 0x1e, 0x2e,
    0xd9, 0x64, 0x89, 0xa1, 0xc6, 0x6d, 0xd1, 0xc9,
    0x18, 0xcc, 0x6d, 0x3d, 0xb8, 0x8f, 0x66, 0xda,
    0x67, 0x6b, 0x4f, 0x25, 0xc3, 0x5d, 0x1d, 0xc7,
    0xb8, 0xc0, 0x68, 0x8c, 0x5f, 0x4b, 0x31, 0x37,
    0x31, 0x38, 0x55, 0x3f, 0x56, 0x3c, 0xf7, 0x2b,
    0xc1, 0x2a, 0xa4, 0xc0, 0x9e, 0xd5, 0xca, 0x81,
    0x87, 0x05, 0x84, 0x1a, 0xb9, 0xfc, 0x9c, 0x48,
    0xd1, 0x52, 0xb5, 0x3c, 0xeb, 0x06, 0x92, 0xef,
    0x03, 0x54, 0xfd, 0x30, 0xb7, 0x71, 0xd2, 0xb1,
    0x07, 0x6e, 0x87, 0x9a, 0xd4, 0x53, 0x28, 0xf4,
    0x7b, 0x52, 0x86, 0x97, 0xee, 0x93, 0x93, 0x7e,
    0xf2, 0x5c, 0x86, 0x32, 0x5a, 0xb1, 0xf5, 0x78,
    0x45, 0x7a, 0x5a, 0x61, 0x31, 0x8f, 0x8c, 0x81,
    0xe1, 0x56, 0xbc, 0x58, 0x64, 0x3f, 0xf7, 0x3a,
    0x55, 0xc6, 0xb3, 0x6d, 0x05, 0x1a, 0x79, 0x9f,
    0x1b, 0xcc, 0xe8, 0xbb, 0x6f, 0x72, 0xbb, 0x96,
    0x5d, 0xaf, 0xca, 0xb2, 0xef, 0xeb, 0x3e, 0x0b,
    0x68, 0x95, 0x38, 0x40, 0x1d, 0x14, 0x1a, 0xc3,
    0x05, 0x9f, 0x3f, 0x40, 0x31, 0x40, 0x30, 0x1b,
    0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
    0x01, 0x09, 0x14, 0x31, 0x0e, 0x1e, 0x0c, 0x00,
    0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6b, 0x00,
    0x5f, 0x00, 0x32, 0x30, 0x21, 0x06, 0x09, 0x2a,
    0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x15,
    0x31, 0x14, 0x04, 0x12, 0x54, 0x69, 0x6d, 0x65,
    0x20, 0x31, 0x34, 0x33, 0x32, 0x37, 0x33, 0x35,
    0x36, 0x31, 0x31, 0x31, 0x38, 0x39, 0x30, 0x82,
    0x07, 0x73, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
    0xf7, 0x0d, 0x01, 0x07, 0x06, 0xa0, 0x82, 0x07,
    0x64, 0x30, 0x82, 0x07, 0x60, 0x02, 0x01, 0x00,
    0x30, 0x82, 0x07, 0x59, 0x06, 0x09, 0x2a, 0x86,
    0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x01, 0x30,
    0x28, 0x06, 0x0a, 0x2a, 0x86, 0x48, 0x86, 0xf7,
    0x0d, 0x01, 0x0c, 0x01, 0x06, 0x30, 0x1a, 0x04,
    0x14, 0x39, 0xb3, 0x7e, 0x61, 0x55, 0x3b, 0x46,
    0x41, 0xd2, 0xce, 0x50, 0x7d, 0x7c, 0x59, 0x7b,
    0xae, 0x0e, 0xef, 0x20, 0x27, 0x02, 0x02, 0x04,
    0x00, 0x80, 0x82, 0x07, 0x20, 0x84, 0xef, 0xd4,
    0x45, 0x53, 0x3a, 0x26, 0xdb, 0x67, 0xa1, 0x14,
    0xde, 0x1f, 0x98, 0x8d, 0x2e, 0xa1, 0xb9, 0xdb,
    0x5d, 0x6c, 0xb6, 0x25, 0xf4, 0xdb, 0xbb, 0x42,
    0x59, 0x2d, 0xb1, 0x8f, 0xd8, 0x0d, 0x6f, 0xb1,
    0x2c, 0x73, 0x12, 0x86, 0x5a, 0xdc, 0x46, 0x23,
    0xea, 0x41, 0x5c, 0x3d, 0xcf, 0xfb, 0x24, 0x17,
    0x37, 0xee, 0xfc, 0x54, 0x05, 0xff, 0x95, 0xc4,
    0x87, 0x22, 0x8e, 0xe5, 0x19, 0x43, 0xec, 0x38,
    0x84, 0x91, 0x9d, 0x57, 0x51, 0xc8, 0x46, 0xe5,
    0xef, 0xad, 0x76, 0x40, 0x83, 0x72, 0x54, 0xb2,
    0x1e, 0xb6, 0xd3, 0x6d, 0x4b, 0x0b, 0xf1, 0xcd,
    0x19, 0x96, 0xb1, 0x52, 0xdd, 0x08, 0x49, 0xb8,
    0xb3, 0x8b, 0x5d, 0xaf, 0xa3, 0xb5, 0x0e, 0x04,
    0x31, 0xc7, 0x14, 0x1d, 0x98, 0xbc, 0xb9, 0x52,
    0xec, 0x7d, 0x95, 0x28, 0x7b, 0x4b, 0x10, 0x0f,
    0xdb, 0xfa, 0x86, 0xe8, 0x32, 0x09, 0x7b, 0x6e,
    0x63, 0x00, 0x11, 0x32, 0x19, 0xda, 0xc0, 0xd1,
    0x71, 0x1f, 0xc7, 0x2b, 0xb9, 0x29, 0xe6, 0x0a,
    0x6b, 0xc8, 0x2c, 0xf8, 0x29, 0xf8, 0x34, 0xf7,
    0x54, 0x30, 0xb0, 0x29, 0x59, 0xf6, 0x24, 0x91,
    0xf6, 0xd8, 0x6a, 0x41, 0x81, 0xee, 0x3a, 0xf0,
    0x90, 0x3c, 0xea, 0x7c, 0x71, 0x60, 0xfb, 0xc4,
    0x18, 0xe6, 0x02, 0xfd, 0xf4, 0x4d, 0x0d, 0x74,
    0x5a, 0xa0, 0x16, 0xfd, 0x37, 0x0c, 0xb3, 0xb7,
    0xe8, 0x68, 0x55, 0xac, 0x61, 0x59, 0x53, 0x76,
    0xd2, 0x43, 0xaf, 0xb6, 0xe3, 0x4b, 0x9c, 0x63,
    0x8e, 0xff, 0xdb, 0x8f, 0xa9, 0x85, 0xed, 0x4f,
    0xe5, 0xc1, 0xb8, 0xc8, 0x38, 0x39, 0xee, 0x28,
    0x63, 0x6f, 0xf4, 0x9d, 0x49, 0x92, 0xcd, 0x3a,
    0x3d, 0x4c, 0x64, 0x81, 0x45, 0xba, 0x72, 0x6b,
    0x71, 0xc3, 0x4a, 0x8e, 0x01, 0x9b, 0x20, 0x3c,
    0x71, 0xc6, 0xca, 0xea, 0xc4, 0x6f, 0xf4, 0xfe,
    0x1f, 0xc4, 0xb1, 0x94, 0xaa, 0x10, 0x92, 0xbd,
    0x81, 0x8c, 0x7e, 0x3c, 0xe9, 0xb1, 0x0c, 0xe8,
    0x6b, 0x59, 0x10, 0x5e, 0x4e, 0x06, 0x4e, 0xe1,
    0x35, 0xc9, 0x0d, 0x11, 0x14, 0x21, 0x80, 0x3f,
    0x3b, 0xeb, 0xe0, 0x32, 0x14, 0x6f, 0xb2, 0x7a,
    0x57, 0xda, 0xba, 0xca, 0x7a, 0xe7, 0xec, 0x15,
    0x7b, 0x67, 0x6e, 0xc9, 0xd7, 0xf2, 0xde, 0xfe,
    0x49, 0x91, 0x26, 0x9e, 0x2c, 0xae, 0x79, 0x34,
    0xc1, 0x52, 0xa0, 0x51, 0x57, 0x4d, 0x85, 0x0c,
    0xcf, 0xfb, 0xdd, 0xfa, 0xe1, 0xf3, 0xc9, 0x20,
    0x8a, 0xbc, 0x21, 0x1f, 0x96, 0x1c, 0x6d, 0xbb,
    0x32, 0x4b, 0x17, 0x80, 0x23, 0x9c, 0xc5, 0xf8,
    0xae, 0x95, 0x39, 0x9d, 0xdf, 0x8d, 0x7f, 0xbe,
    0x7b, 0x3c, 0x49, 0xf8, 0x29, 0x3d, 0xb8, 0xed,
    0xf4, 0x94, 0x50, 0xe4, 0xe6, 0x3e, 0x3e, 0xc9,
    0xb0, 0x4e, 0xeb, 0x33, 0xc7, 0x53, 0xc5, 0x45,
    0x0a, 0x72, 0xd2, 0x83, 0x3a, 0x5c, 0x59, 0x51,
    0xec, 0xc1, 0x1f, 0x4c, 0x7c, 0xbf, 0xcc, 0xaa,
    0x0a, 0x60, 0x9d, 0x72, 0x30, 0xfe, 0x4e, 0x83,
    0xea, 0x41, 0x9f, 0xcd, 0x5c, 0x79, 0xe0, 0x84,
    0xd4, 0x66, 0xa9, 0xe9, 0x36, 0x5c, 0xd5, 0x1b,
    0x57, 0xb0, 0xbb, 0xe9, 0x56, 0x0b, 0x73, 0xcf,
    0x55, 0x04, 0x5e, 0x6a, 0x11, 0x0e, 0xc2, 0x01,
    0x9d, 0xc5, 0x1f, 0x65, 0x48, 0x54, 0x74, 0xff,
    0x19, 0x93, 0x70, 0x72, 0x7a, 0xdd, 0xbe, 0xf6,
    0x23, 0xe6, 0xa7, 0x14, 0xd7, 0xe4, 0x0f, 0x5e,
    0xf2, 0x50, 0xc2, 0x35, 0x3a, 0xb1, 0xb5, 0xab,
    0x51, 0xda, 0x80, 0x26, 0xd6, 0x39, 0x52, 0xd1,
    0x2a, 0x00, 0xb5, 0xc5, 0x49, 0x28, 0xbd, 0x59,
    0x25, 0x7a, 0x0c, 0x90, 0x5b, 0x45, 0x47, 0x84,
    0x82, 0xb0, 0x64, 0x61, 0x9e, 0x35, 0x01, 0xcc,
    0xec, 0xf9, 0xbf, 0xf4, 0xa9, 0xa4, 0x81, 0xa0,
    0x74, 0x93, 0x78, 0xde, 0x27, 0x3d, 0x81, 0x5a,
    0xa5, 0x57, 0x4f, 0x01, 0x04, 0xbd, 0xd0, 0x0f,
    0x9e, 0xfa, 0xba, 0x13, 0xd2, 0x27, 0x0c, 0x86,
    0x03, 0x57, 0x3e, 0x21, 0xe6, 0x3c, 0x1d, 0x73,
    0x9e, 0x86, 0x38, 0x91, 0x50, 0x1f, 0xca, 0x44,
    0x33, 0x54, 0x0a, 0xfa, 0x5e, 0x40, 0xfb, 0xf9,
    0xa2, 0x5b, 0xce, 0xea, 0x4f, 0x3a, 0x7b, 0x30,
    0x5a, 0x66, 0xe9, 0x22, 0xf7, 0x7a, 0x92, 0x1e,
    0x52, 0x90, 0x11, 0x64, 0x96, 0x15, 0x56, 0x50,
    0xb7, 0xa4, 0x93, 0xbb, 0xbc, 0x3f, 0xce, 0xe3,
    0x0d, 0x7e, 0x3a, 0xa3, 0x6b, 0x86, 0xf4, 0xd8,
    0x97, 0x13, 0x5c, 0xf4, 0xb9, 0x6c, 0x5f, 0x25,
    0x3e, 0x8f, 0xba, 0x1e, 0xbf, 0xdd, 0x22, 0x31,
    0x4f, 0xe2, 0x14, 0x0d, 0xa3, 0x7a, 0x88, 0xe1,
    0x69, 0xb3, 0x1e, 0x51, 0x7d, 0x97, 0x0c, 0xe2,
    0x41, 0x91, 0x13, 0x69, 0x47, 0x0e, 0xea, 0xad,
    0xd8, 0x93, 0x11, 0x37, 0x1f, 0x5e, 0x9a, 0x1e,
    0xb2, 0xbd, 0x4c, 0x74, 0x09, 0x89, 0x79, 0x31,
    0x6c, 0x07, 0x4f, 0xa6, 0x71, 0xb0, 0xfc, 0xfc,
    0x2e, 0x0b, 0xc9, 0xa4, 0x8c, 0x56, 0x7a, 0x94,
    0xff, 0xac, 0x4f, 0xbc, 0xa5, 0x76, 0x42, 0xc0,
    0x4d, 0xd2, 0xdb, 0x9c, 0x2a, 0x17, 0x7c, 0xd3,
    0x6b, 0x23, 0x74, 0xc2, 0xc5, 0x3e, 0xf9, 0xb6,
    0x1d, 0x3a, 0x53, 0xec, 0xd1, 0xd7, 0x4e, 0xda,
    0xea, 0x95, 0x22, 0x9a, 0xa2, 0xb3, 0x14, 0xd7,
    0xf2, 0x84, 0xae, 0x7c, 0xdb, 0xa7, 0xca, 0x32,
    0xcc, 0xc6, 0x37, 0x3e, 0xff, 0x12, 0x11, 0xbc,
    0x69, 0x4d, 0x2b, 0x8c, 0x56, 0x56, 0xa4, 0xf6,
    0xfc, 0x94, 0x01, 0x65, 0x04, 0x2b, 0x02, 0x21,
    0x86, 0xf2, 0xe5, 0xf3, 0x79, 0x94, 0x77, 0xad,
    0x7b, 0x7d, 0x3d, 0x0c, 0x90, 0xf0, 0x41, 0x37,
    0x8a, 0xc4, 0xe1, 0xd7, 0x03, 0x22, 0x46, 0x70,
    0x71, 0xb0, 0xf0, 0xfc, 0x5f, 0xa6, 0xca, 0xd1,
    0xa6, 0xc0, 0x0a, 0xf3, 0xbd, 0x59, 0xa9, 0xfa,
    0xa9, 0xee, 0xf0, 0xbe, 0x6d, 0x35, 0x2f, 0xf9,
    0x63, 0x64, 0xaf, 0xa7, 0x32, 0xeb, 0xe0, 0x0e,
    0x6d, 0x93, 0xca, 0x93, 0x3d, 0xce, 0xa5, 0x3b,
    0x3b, 0xe6, 0x8c, 0xab, 0xfd, 0xad, 0x04, 0xef,
    0x8f, 0x53, 0x0b, 0x34, 0x43, 0x43, 0xe0, 0x6a,
    0x42, 0xae, 0x04, 0x78, 0xdf, 0x56, 0x42, 0x0e,
    0x80, 0x67, 0x60, 0x4f, 0xeb, 0xce, 0x85, 0x22,
    0x4a, 0x2e, 0x80, 0x1f, 0x86, 0x63, 0x63, 0x05,
    0x09, 0x72, 0xdf, 0xd9, 0x41, 0xb0, 0xf4, 0x92,
    0xcf, 0xaa, 0xb2, 0xf8, 0xdd, 0x7e, 0xc4, 0xa7,
    0x96, 0xd9, 0xb7, 0xb2, 0x91, 0x0c, 0x22, 0x49,
    0xd9, 0x4b, 0xe9, 0xad, 0xda, 0x24, 0x44, 0xfd,
    0x06, 0x5d, 0x6e, 0x9d, 0x0f, 0x55, 0xf2, 0xe4,
    0x6b, 0xb0, 0xe7, 0x50, 0xb1, 0xb9, 0x84, 0x57,
    0x17, 0x9e, 0x5e, 0x27, 0xad, 0x10, 0xd3, 0x25,
    0xc6, 0x1d, 0xd7, 0xb5, 0x9a, 0xa0, 0x38, 0xe0,
    0xe0, 0x1b, 0x90, 0x18, 0xb8, 0x2c, 0x59, 0xd6,
    0xfe, 0x20, 0x56, 0x8f, 0x89, 0xa5, 0x9c, 0xd0,
    0x92, 0x3c, 0x1a, 0x22, 0xee, 0x03, 0x3b, 0xf1,
    0x95, 0xdd, 0x83, 0x97, 0xb7, 0x51, 0xa4, 0xd4,
    0x49, 0x7b, 0x95, 0x48, 0xd4, 0x3c, 0xef, 0xa0,
    0x43, 0x8a, 0x80, 0x1d, 0xc3, 0xfe, 0x0c, 0x7c,
    0xc0, 0xa6, 0xc3, 0xaf, 0xce, 0x2d, 0x09, 0x3d,
    0x96, 0x90, 0x97, 0x73, 0x38, 0x53, 0xaf, 0x3f,
    0x08, 0x8b, 0x62, 0xae, 0x8b, 0xbb, 0xf4, 0x65,
    0xa7, 0x17, 0x09, 0x8e, 0x3c, 0x3b, 0x1a, 0xad,
    0xfc, 0x0f, 0x65, 0xd6, 0x9b, 0x77, 0xef, 0xeb,
    0xe1, 0x64, 0x96, 0x00, 0xed, 0xe3, 0xbe, 0x49,
    0xfd, 0xc5, 0x05, 0x8f, 0xba, 0x83, 0x68, 0x33,
    0x56, 0xbb, 0x6b, 0xc9, 0x67, 0x25, 0xdc, 0xb5,
    0xd5, 0xc7, 0x7c, 0x17, 0x4d, 0xd8, 0x5c, 0x51,
    0xd2, 0x7c, 0x2a, 0xd5, 0xc2, 0xf3, 0xf4, 0xc5,
    0xd8, 0xf6, 0xe0, 0x3b, 0x75, 0x1e, 0xe2, 0x36,
    0xdc, 0x86, 0x21, 0xb8, 0x0f, 0x07, 0xc4, 0x35,
    0xe1, 0xe7, 0x4d, 0x18, 0x04, 0xa2, 0x98, 0x97,
    0xbd, 0x74, 0xd6, 0xf3, 0x4a, 0xba, 0x12, 0x6c,
    0xf5, 0xc6, 0xfc, 0x5c, 0xf2, 0x31, 0x4a, 0x58,
    0xad, 0x15, 0x47, 0x37, 0x21, 0x02, 0xb9, 0x22,
    0x8a, 0xbb, 0xa3, 0x51, 0xcb, 0xba, 0xaf, 0x9b,
    0x13, 0x3e, 0x73, 0x02, 0x7c, 0x98, 0x73, 0x33,
    0x08, 0x4a, 0xcd, 0xf0, 0x58, 0xae, 0x43, 0x97,
    0xf6, 0x1e, 0xad, 0x7d, 0xbb, 0x93, 0xc2, 0x31,
    0x95, 0x17, 0xb1, 0x91, 0x62, 0xf7, 0xc4, 0x3f,
    0x47, 0x9d, 0xd8, 0x51, 0x4e, 0x8d, 0x51, 0x17,
    0x87, 0xb7, 0xd6, 0x45, 0x67, 0x21, 0x28, 0x08,
    0x7c, 0x1c, 0xbc, 0xc6, 0x33, 0xa0, 0x01, 0x6c,
    0x41, 0x9b, 0xcf, 0x70, 0xfb, 0x86, 0x05, 0xfd,
    0xb4, 0x2a, 0xd3, 0xc7, 0x2f, 0xfe, 0x55, 0xfb,
    0xa7, 0x3d, 0x9e, 0xa5, 0x94, 0xf9, 0x5c, 0x54,
    0x33, 0x93, 0x30, 0x67, 0x31, 0xdd, 0xf5, 0xb8,
    0x54, 0xc5, 0x5b, 0xcf, 0xd5, 0xbe, 0x5e, 0xa8,
    0x12, 0xfe, 0x27, 0x2b, 0x32, 0xe0, 0xb9, 0x8d,
    0x76, 0xb3, 0x8d, 0x05, 0x24, 0xb4, 0xcf, 0xe3,
    0xf6, 0x7d, 0x3f, 0x3d, 0x51, 0x72, 0xe2, 0x49,
    0xd7, 0xf3, 0x6f, 0x35, 0x10, 0x56, 0x5f, 0xcb,
    0x90, 0x6c, 0x4a, 0x18, 0x74, 0x59, 0x0c, 0xf8,
    0xbe, 0x43, 0x94, 0x8b, 0x4a, 0xf9, 0xfa, 0xd4,
    0x64, 0x84, 0xb8, 0xd0, 0x17, 0x31, 0x1f, 0xc6,
    0xe7, 0x9c, 0xe5, 0xb6, 0x1a, 0x39, 0x42, 0x5c,
    0xdc, 0xbb, 0x55, 0xe6, 0x0d, 0xa9, 0x99, 0x26,
    0x81, 0xf9, 0x3c, 0x41, 0x97, 0x8c, 0x85, 0x84,
    0xf5, 0xcb, 0x33, 0x39, 0x32, 0xac, 0x7a, 0x80,
    0x0d, 0x8a, 0x5d, 0x7a, 0xf3, 0x4c, 0xcb, 0xa9,
    0xb4, 0xfb, 0xd1, 0xe9, 0xb8, 0x0d, 0xd3, 0x5f,
    0xb1, 0xfd, 0xbb, 0x16, 0x85, 0x69, 0xa4, 0x4c,
    0x63, 0x96, 0x4a, 0xe4, 0xfc, 0xf3, 0xa8, 0x08,
    0xca, 0x20, 0x9e, 0xa6, 0x91, 0x53, 0xe9, 0xbf,
    0xfe, 0x00, 0x1e, 0xf0, 0xe5, 0x9f, 0x5e, 0x2b,
    0x22, 0xe7, 0x58, 0x7e, 0x3b, 0xfa, 0x74, 0xfb,
    0x87, 0x8c, 0xee, 0xce, 0x0e, 0xf9, 0xcf, 0xa9,
    0x6f, 0x45, 0x64, 0x7a, 0xdf, 0x86, 0xee, 0xfa,
    0xaa, 0x05, 0x4d, 0xb0, 0x20, 0x3c, 0x95, 0x2c,
    0x7c, 0xd0, 0xe0, 0x82, 0xc5, 0x53, 0x23, 0x1e,
    0x69, 0x67, 0x67, 0x88, 0x51, 0xb2, 0x75, 0x86,
    0x61, 0xf1, 0x49, 0x62, 0xeb, 0x97, 0x16, 0x7b,
    0x29, 0x48, 0x7e, 0x4c, 0x54, 0xa2, 0x02, 0x68,
    0x16, 0x0d, 0x1d, 0xa0, 0xf3, 0x5c, 0x5f, 0xb3,
    0xbb, 0x96, 0x11, 0xfe, 0xfe, 0x05, 0x3b, 0xf4,
    0xa8, 0xf9, 0xe2, 0x73, 0x25, 0x22, 0x93, 0xc2,
    0x61, 0x5e, 0x56, 0x50, 0x7b, 0xbd, 0x07, 0xcf,
    0xcb, 0x36, 0x67, 0x69, 0xd6, 0xe2, 0xc5, 0x0c,
    0x6a, 0xee, 0xea, 0xcb, 0x5b, 0x6a, 0x0b, 0xbb,
    0x02, 0x03, 0x90, 0x25, 0x70, 0xb0, 0x41, 0xb8,
    0x68, 0x19, 0xe1, 0x4e, 0x69, 0xa8, 0x06, 0x93,
    0x85, 0x0e, 0xde, 0x92, 0x9e, 0xfd, 0x35, 0x9f,
    0x6e, 0x3a, 0x98, 0xa2, 0x36, 0x5a, 0xae, 0x1a,
    0x20, 0x11, 0x9a, 0x9c, 0xab, 0xd6, 0x07, 0x20,
    0x66, 0x38, 0x2d, 0x3d, 0x14, 0x6b, 0x31, 0x0c,
    0x9e, 0x83, 0xcd, 0x8a, 0xed, 0x81, 0xc5, 0xbb,
    0xf4, 0xeb, 0xd5, 0x3a, 0xd5, 0xd9, 0xf6, 0x76,
    0xfc, 0xa7, 0xad, 0xcc, 0x2b, 0xc0, 0xc5, 0xa1,
    0x08, 0xc6, 0xe2, 0xae, 0xfa, 0xb9, 0x1b, 0x04,
    0xd3, 0x39, 0xa0, 0x35, 0xfb, 0x8f, 0x08, 0xc0,
    0x05, 0xb4, 0x47, 0x56, 0xf2, 0x80, 0x03, 0xe9,
    0x4c, 0x14, 0xa4, 0x69, 0x0e, 0x03, 0xf7, 0xa8,
    0x95, 0x79, 0xbe, 0x31, 0xeb, 0xbc, 0xd3, 0xec,
    0x4c, 0x8a, 0xab, 0x71, 0x9a, 0x0a, 0x0c, 0xab,
    0x33, 0x52, 0x82, 0x1e, 0x37, 0x49, 0x12, 0xad,
    0xdd, 0xed, 0x74, 0x34, 0xa3, 0x06, 0x54, 0x82,
    0xb4, 0x71, 0x0c, 0x9f, 0x0d, 0x0d, 0x28, 0x27,
    0x6a, 0xa7, 0x27, 0xf4, 0x1c, 0x3f, 0x67, 0xab,
    0xb1, 0x85, 0xf8, 0x22, 0x30, 0x28, 0x83, 0xeb,
    0x7a, 0x49, 0x5b, 0x30, 0x9c, 0xbe, 0x9c, 0xc0,
    0xd9, 0x19, 0x68, 0x6e, 0x3c, 0x15, 0xae, 0xaa,
    0x83, 0x11, 0x5b, 0xd8, 0x73, 0x51, 0x00, 0x31,
    0x69, 0xf2, 0xef, 0x8e, 0xa1, 0xcd, 0xf5, 0x9b,
    0x95, 0xfd, 0x78, 0x2e, 0xcb, 0x1b, 0xcc, 0x2d,
    0x2e, 0x41, 0xdf, 0xb9, 0x38, 0xe2, 0x42, 0x5f,
    0x28, 0xee, 0x1d, 0x6e, 0xf9, 0x42, 0x34, 0xea,
    0xe4, 0x89, 0x01, 0xf1, 0x87, 0x63, 0x76, 0x13,
    0x4d, 0x6e, 0xb6, 0x57, 0x41, 0xec, 0xb3, 0x34,
    0x71, 0x1d, 0xdd, 0xa0, 0x49, 0x91, 0xa3, 0x9d,
    0x08, 0x92, 0x18, 0xf2, 0x79, 0xd0, 0x05, 0x19,
    0x6e, 0x74, 0xdf, 0x7b, 0x32, 0x17, 0xb2, 0x22,
    0xe1, 0x4c, 0x33, 0x26, 0x6b, 0x3c, 0xac, 0xca,
    0x77, 0x55, 0x8f, 0x99, 0x7f, 0x62, 0x4f, 0xd8,
    0x55, 0xa4, 0x8a, 0xae, 0x8a, 0x7d, 0xb0, 0x49,
    0x10, 0xb8, 0x53, 0x7b, 0x07, 0xec, 0x05, 0xee,
    0xae, 0x43, 0xcf, 0x39, 0x55, 0xf7, 0xba, 0xfe,
    0x4d, 0xbf, 0x1e, 0x95, 0x1f, 0xf5, 0x8a, 0x04,
    0xae, 0x1e, 0xc7, 0x57, 0x92, 0xad, 0x89, 0x86,
    0xa4, 0x25, 0xbc, 0xea, 0xac, 0xf6, 0xb4, 0x48,
    0x8e, 0xd3, 0x0d, 0x71, 0x9a, 0xe9, 0x92, 0x82,
    0x55, 0x51, 0xb7, 0x56, 0x04, 0xe6, 0x0d, 0xfc,
    0x27, 0x0a, 0xc7, 0xa7, 0x77, 0xc0, 0x75, 0xf9,
    0x5b, 0x7e, 0xba, 0x08, 0x9b, 0x46, 0xd8, 0x0b,
    0x8a, 0xb3, 0xa6, 0x61, 0x1a, 0xca, 0xf8, 0xde,
    0xc7, 0x4d, 0x97, 0xb5, 0x71, 0x27, 0xfe, 0x74,
    0x2a, 0x60, 0xba, 0x8e, 0xe7, 0x10, 0xc9, 0x1b,
    0x60, 0xcf, 0xf1, 0xf6, 0xd1, 0x30, 0x3d, 0x30,
    0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03,
    0x02, 0x1a, 0x05, 0x00, 0x04, 0x14, 0xcf, 0x18,
    0xd1, 0xf6, 0xaa, 0xab, 0x25, 0xb1, 0x1a, 0xf1,
    0xf7, 0xf2, 0x65, 0x27, 0x76, 0x6a, 0xd2, 0x25,
    0x8d, 0x7c, 0x04, 0x14, 0xdd, 0x57, 0x3a, 0x9d,
    0xca, 0x5e, 0xae, 0x14, 0x34, 0x2c, 0x2a, 0x01,
    0x97, 0x66, 0xcc, 0xbc, 0xaf, 0xf0, 0xea, 0xf7,
    0x02, 0x02, 0x04, 0x00,
    
};
const uint8_t cacertData[] = {
    0x30, 0x82, 0x04, 0x6c, 0x02, 0x01, 0x03, 0x30,
    0x82, 0x04, 0x32, 0x06, 0x09, 0x2a, 0x86, 0x48,
    0x86, 0xf7, 0x0d, 0x01, 0x07, 0x01, 0xa0, 0x82,
    0x04, 0x23, 0x04, 0x82, 0x04, 0x1f, 0x30, 0x82,
    0x04, 0x1b, 0x30, 0x82, 0x04, 0x17, 0x06, 0x09,
    0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07,
    0x06, 0xa0, 0x82, 0x04, 0x08, 0x30, 0x82, 0x04,
    0x04, 0x02, 0x01, 0x00, 0x30, 0x82, 0x03, 0xfd,
    0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
    0x01, 0x07, 0x01, 0x30, 0x1c, 0x06, 0x0a, 0x2a,
    0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01,
    0x06, 0x30, 0x0e, 0x04, 0x08, 0xab, 0x21, 0x82,
    0xa1, 0xc5, 0x7e, 0xe1, 0x05, 0x02, 0x02, 0x08,
    0x00, 0x80, 0x82, 0x03, 0xd0, 0xe2, 0x37, 0xec,
    0x5e, 0x0c, 0x62, 0x9b, 0x24, 0x81, 0x08, 0x59,
    0x30, 0x5b, 0x54, 0x78, 0xb8, 0x57, 0x22, 0x73,
    0x2e, 0xb9, 0xca, 0xe8, 0x60, 0xce, 0xc9, 0x06,
    0x34, 0x7a, 0x6e, 0x07, 0xb8, 0x76, 0x16, 0x84,
    0xd5, 0xd4, 0x29, 0x44, 0xbd, 0x5b, 0x2f, 0x35,
    0x2f, 0xa9, 0x0b, 0x9d, 0xec, 0x2c, 0x2b, 0xc6,
    0xe8, 0xd2, 0x75, 0xa4, 0x7c, 0xbd, 0xb1, 0xda,
    0xdc, 0xb1, 0x7c, 0xb8, 0xe7, 0x9b, 0xd8, 0x41,
    0xe1, 0x24, 0xe9, 0x17, 0x24, 0xee, 0x9e, 0x0f,
    0x47, 0x27, 0x2f, 0x26, 0x79, 0x97, 0x6b, 0x11,
    0x00, 0xc0, 0xe7, 0x15, 0x21, 0xb5, 0x4b, 0xa2,
    0xca, 0xc8, 0xe0, 0xe5, 0x74, 0xc2, 0xac, 0x50,
    0xc2, 0xb5, 0x66, 0x03, 0x98, 0xf8, 0x77, 0x21,
    0xf7, 0x28, 0xc8, 0xdd, 0x53, 0xf3, 0x3f, 0x52,
    0x69, 0xaa, 0x9b, 0x03, 0xab, 0x3f, 0x3b, 0xc0,
    0x14, 0xaf, 0x16, 0x48, 0x4c, 0x17, 0xbb, 0xfe,
    0x79, 0x61, 0xe7, 0xa7, 0x0c, 0x84, 0x68, 0x29,
    0xee, 0xe1, 0xce, 0x4c, 0x5c, 0x9e, 0x0b, 0x89,
    0x1c, 0x98, 0xd4, 0x47, 0x18, 0x6a, 0xc8, 0xfe,
    0x7b, 0x08, 0xf5, 0xaf, 0x2b, 0x5d, 0x76, 0x78,
    0xc6, 0x43, 0x24, 0x6e, 0xcb, 0xe4, 0xce, 0x19,
    0x1c, 0xbf, 0xe8, 0x1b, 0x41, 0x67, 0x6e, 0xf0,
    0x3d, 0x7f, 0xbc, 0x6f, 0xc5, 0xc6, 0x78, 0xb1,
    0x2f, 0x99, 0x3c, 0xda, 0x20, 0x2e, 0x2b, 0x17,
    0xeb, 0xcf, 0x19, 0xf3, 0x8a, 0xd9, 0xb8, 0x10,
    0xf5, 0x52, 0x91, 0x15, 0x20, 0xb8, 0xad, 0x2d,
    0x2f, 0x75, 0xbb, 0x9e, 0x33, 0x32, 0x8f, 0x28,
    0x64, 0x36, 0xb7, 0xa8, 0x52, 0xb6, 0x29, 0x09,
    0x5a, 0x0b, 0xc4, 0x85, 0xdf, 0x1b, 0xa3, 0xbb,
    0xc2, 0x1f, 0x02, 0xae, 0x87, 0x56, 0x4e, 0x33,
    0xe0, 0x22, 0xed, 0xd6, 0x2f, 0xef, 0xf6, 0xc8,
    0xda, 0x94, 0x6c, 0x88, 0x55, 0xdc, 0xcf, 0xe6,
    0x8a, 0x70, 0xdf, 0x21, 0x19, 0x97, 0xa9, 0x59,
    0x56, 0xb2, 0x0b, 0xd9, 0x4e, 0xe4, 0x3b, 0x34,
    0x92, 0xc1, 0x36, 0xa6, 0x41, 0xea, 0xae, 0x54,
    0xc0, 0x98, 0x07, 0xaf, 0x64, 0xc4, 0x26, 0x16,
    0x96, 0x77, 0xae, 0x32, 0x68, 0x3b, 0x6c, 0xbb,
    0x97, 0xb2, 0x78, 0x7f, 0xda, 0x51, 0x61, 0x3d,
    0x97, 0x01, 0xc6, 0xdd, 0x4e, 0xe1, 0x87, 0x22,
    0x72, 0x19, 0x0e, 0xb7, 0x95, 0x5d, 0xc4, 0x50,
    0x36, 0x1b, 0x4f, 0x16, 0x57, 0x9b, 0x05, 0x21,
    0xd5, 0x85, 0x7a, 0x8a, 0x28, 0xf3, 0x7a, 0x16,
    0x10, 0x27, 0x8b, 0x17, 0xd4, 0xb5, 0x1b, 0x5d,
    0x9a, 0x99, 0xd9, 0xec, 0x41, 0xc0, 0x8c, 0x00,
    0x87, 0xbb, 0x46, 0x00, 0xae, 0xea, 0x5f, 0x93,
    0x80, 0x54, 0x91, 0x5a, 0x1f, 0xc6, 0xcf, 0xad,
    0x60, 0xeb, 0xdc, 0xea, 0x95, 0xf2, 0x57, 0xf6,
    0xfe, 0x59, 0xee, 0x6a, 0xc8, 0x29, 0x26, 0x59,
    0x68, 0x67, 0xcb, 0x79, 0x51, 0x7e, 0x0d, 0xc3,
    0x70, 0x0e, 0xd6, 0x21, 0x01, 0xc2, 0xc0, 0xbe,
    0xce, 0x5a, 0x7d, 0xd1, 0x63, 0xde, 0x32, 0x61,
    0x74, 0x73, 0xa1, 0xdb, 0xa7, 0x8e, 0x73, 0xfa,
    0xa8, 0x56, 0x6c, 0x91, 0x97, 0xa8, 0x1e, 0x0c,
    0x1f, 0xf6, 0x55, 0xf7, 0x15, 0x6a, 0x88, 0xb8,
    0xc5, 0x05, 0x23, 0xe3, 0x1c, 0xbe, 0x78, 0xc5,
    0xd9, 0x19, 0x9d, 0x49, 0x6f, 0x8a, 0x3e, 0x60,
    0xac, 0x51, 0x1b, 0x05, 0xab, 0x73, 0x70, 0xd6,
    0x63, 0xd1, 0x06, 0x68, 0x8c, 0x6c, 0x98, 0x08,
    0x18, 0x5c, 0x03, 0xcf, 0x05, 0x99, 0x0f, 0xd4,
    0x27, 0xe4, 0x14, 0xca, 0xbc, 0x8d, 0xbb, 0x55,
    0x02, 0xa1, 0x27, 0xa8, 0xda, 0xe5, 0xd5, 0xd8,
    0xa0, 0x84, 0xa2, 0xbf, 0x79, 0xd0, 0x34, 0xc1,
    0x02, 0x8b, 0x53, 0x43, 0xb4, 0x69, 0x83, 0xf4,
    0x6e, 0xae, 0x17, 0x2d, 0x2e, 0x7c, 0x43, 0x41,
    0xa5, 0x26, 0x4e, 0x27, 0x07, 0x14, 0x58, 0x39,
    0x06, 0xbb, 0xc1, 0xce, 0x54, 0xa6, 0xdf, 0x08,
    0xa6, 0x26, 0xe2, 0x1d, 0x9b, 0x8b, 0xbd, 0x2a,
    0xb7, 0x44, 0x93, 0xbd, 0xa2, 0x81, 0x9a, 0xf8,
    0x0c, 0x0e, 0x3c, 0x94, 0x77, 0x71, 0x77, 0xd5,
    0x14, 0xb5, 0x80, 0x0b, 0x5a, 0x40, 0xc8, 0x30,
    0xe3, 0xb6, 0x4f, 0x75, 0x3d, 0xa4, 0xed, 0xb5,
    0x3c, 0x65, 0x3e, 0x95, 0x1b, 0x00, 0x5d, 0x82,
    0x3c, 0x5a, 0x8a, 0x21, 0x8d, 0xaf, 0x57, 0xfe,
    0x1d, 0x95, 0xed, 0xf0, 0x44, 0x82, 0xa0, 0x79,
    0x82, 0x03, 0x9f, 0x97, 0x7c, 0x01, 0x99, 0xaf,
    0x04, 0x00, 0xa3, 0xef, 0x4d, 0x36, 0xe8, 0x29,
    0x88, 0x40, 0xd6, 0x0c, 0x63, 0xe4, 0x30, 0xa9,
    0xb7, 0xe2, 0x57, 0x83, 0x5d, 0xda, 0x2d, 0x7f,
    0x09, 0x66, 0xba, 0xc4, 0x4f, 0xd8, 0xdc, 0x6c,
    0x9a, 0x75, 0xcc, 0x2b, 0x61, 0x70, 0xb5, 0xa4,
    0x48, 0xda, 0x6b, 0x89, 0x2c, 0x55, 0xfe, 0x1f,
    0x26, 0x48, 0xac, 0x2d, 0x9a, 0x99, 0x50, 0x07,
    0x4d, 0x6b, 0xbb, 0x95, 0x04, 0x68, 0x78, 0x01,
    0x3f, 0xf8, 0xe7, 0x55, 0x2c, 0x25, 0x07, 0xdc,
    0x2f, 0x03, 0xc9, 0x05, 0xcd, 0x34, 0xb1, 0xbf,
    0xed, 0x87, 0x8c, 0x84, 0xcd, 0x7a, 0x3e, 0x9a,
    0x44, 0x2f, 0x6c, 0x64, 0x6f, 0x5f, 0xa9, 0xb1,
    0x56, 0x1e, 0x39, 0x2f, 0x2f, 0x38, 0xb5, 0x81,
    0x63, 0xcb, 0x42, 0x69, 0x60, 0x64, 0x8c, 0x8a,
    0x38, 0x9f, 0x07, 0xff, 0xdb, 0xc7, 0x10, 0x05,
    0xf2, 0xd6, 0x27, 0xdd, 0x36, 0xbf, 0x81, 0x01,
    0x57, 0xb7, 0x83, 0x66, 0x51, 0x18, 0x48, 0xa4,
    0xc0, 0x80, 0x01, 0x64, 0x3d, 0x10, 0x0a, 0x8a,
    0x02, 0x1b, 0xf6, 0xc9, 0x54, 0x32, 0xd5, 0xd2,
    0xd1, 0x8b, 0x42, 0x04, 0xa0, 0x8f, 0x36, 0x74,
    0xb9, 0x2d, 0x92, 0xf1, 0xce, 0xf8, 0x7a, 0xe8,
    0x8e, 0x03, 0x3f, 0xb7, 0x4a, 0x55, 0x7e, 0x3e,
    0x5f, 0x18, 0x3a, 0xf1, 0xad, 0x99, 0xaf, 0xc7,
    0x76, 0x5a, 0x80, 0x31, 0x0d, 0x45, 0xa0, 0x56,
    0xe3, 0xf6, 0x20, 0x39, 0x01, 0x1d, 0xb6, 0x53,
    0xe5, 0x13, 0x59, 0x57, 0x2c, 0x8d, 0x3c, 0x00,
    0x5a, 0xa2, 0x42, 0x5a, 0x53, 0xec, 0x86, 0xa4,
    0x9f, 0x7e, 0x95, 0x39, 0x05, 0x4b, 0xda, 0xe8,
    0x23, 0x60, 0x24, 0x61, 0x9b, 0x1d, 0xd1, 0x50,
    0x46, 0xf8, 0x49, 0xa7, 0x65, 0x95, 0x46, 0xc6,
    0x5c, 0x43, 0x81, 0xa4, 0xf5, 0xb2, 0xd9, 0x7f,
    0x97, 0xdc, 0x60, 0xd9, 0xfa, 0xfa, 0x29, 0xdf,
    0x21, 0x2d, 0x92, 0x77, 0x53, 0x23, 0xef, 0xcc,
    0xbb, 0x2e, 0x8a, 0x09, 0x5e, 0x00, 0x67, 0x11,
    0x60, 0x51, 0xf7, 0x4c, 0x6e, 0x65, 0x39, 0x43,
    0x87, 0x23, 0xa5, 0xfb, 0x24, 0x34, 0xea, 0x48,
    0x6b, 0xc9, 0x6e, 0x69, 0xf7, 0x65, 0xaf, 0x5e,
    0x28, 0xde, 0x0c, 0xf8, 0x44, 0xfc, 0xb7, 0xc2,
    0x67, 0x9b, 0x5a, 0x49, 0x3a, 0x8d, 0xc9, 0x38,
    0x8a, 0x18, 0x96, 0xff, 0x82, 0x0c, 0xad, 0x59,
    0xa2, 0x66, 0x32, 0x38, 0x9d, 0x44, 0x6c, 0xa8,
    0x38, 0x79, 0x24, 0xb7, 0xab, 0x3d, 0x4f, 0x01,
    0x53, 0x5c, 0x29, 0x56, 0xc9, 0x97, 0xdd, 0x2b,
    0x67, 0xd8, 0x05, 0x00, 0xba, 0x77, 0x64, 0x99,
    0xc5, 0xde, 0xed, 0x2a, 0x4a, 0x65, 0x0b, 0xf4,
    0x5d, 0x00, 0x9a, 0x7c, 0x2c, 0x3d, 0x1a, 0x71,
    0x30, 0x6c, 0x87, 0x29, 0x63, 0x30, 0x31, 0x30,
    0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03,
    0x02, 0x1a, 0x05, 0x00, 0x04, 0x14, 0xcf, 0x8f,
    0x33, 0x54, 0xd6, 0xe0, 0x62, 0x15, 0xd4, 0xf2,
    0xf1, 0x38, 0xce, 0xa5, 0x84, 0xce, 0x8f, 0x18,
    0x3e, 0xf8, 0x04, 0x08, 0xd1, 0x27, 0xcf, 0x0c,
    0xcf, 0xa1, 0xe5, 0x2a, 0x02, 0x02, 0x08, 0x00
    
};
}



#if NATIVE_DIRECT
using namespace atakmap::commoncommo;


class TestLogger : public CommoLogger
{
public:
    virtual void log(Level level, const char *string) {
        printf("%s\n", string);
    }
};

class Listener : public InterfaceStatusListener, public CoTMessageListener, public ContactPresenceListener
{
public:
    Listener(MasterViewController *master) : InterfaceStatusListener(), CoTMessageListener(), ContactPresenceListener(), master(master)
    {
        
    }
    virtual void interfaceUp(NetInterface *iface)
    {
        dispatch_async(dispatch_get_main_queue(), ^{
            [ master interfaceStatus: true];
        });

    }
    virtual void interfaceDown(NetInterface *iface)
    {
        dispatch_async(dispatch_get_main_queue(), ^{
            [ master interfaceStatus: false];
        });
        
        
    }
    virtual void cotMessageReceived(const char *msg)
    {
        printf("COT Message Received: %s", msg);
        {
            std::string s = msg;
            size_t pos = s.find("<remarks");
            if (pos == std::string::npos)
                return;
            pos = s.find(">", pos);
            if (pos == std::string::npos)
                return;
            pos++;
            size_t end = s.find("</remarks>", pos);
            if (end == std::string::npos)
                return;
            s = s.substr(pos, end - pos);
            NSString *str = [[NSString alloc] initWithBytes:s.c_str() length:s.size() encoding:NSUTF8StringEncoding];
            dispatch_async(dispatch_get_main_queue(), ^{
                [ master addChat: str];
            });
        }
    }
    virtual void contactAdded(const ContactUID *c)
    {
        NSString *str = [[NSString alloc] initWithBytes:c->contactUID length:c->contactUIDLen encoding:NSUTF8StringEncoding];
        dispatch_async(dispatch_get_main_queue(), ^{
            [ master addContact: str];
            printf("Contact added %s\n", [str UTF8String]);
        });
    }
    virtual void contactRemoved(const ContactUID *c)
    {
        NSString *str = [[NSString alloc] initWithBytes:c->contactUID length:c->contactUIDLen encoding:NSUTF8StringEncoding];
        [ master removeContact: str];
    }
private:
    MasterViewController *master;
};

const HwAddress *getWifi() {
    struct ifaddrs *addrList;
    
    if (getifaddrs(&addrList) != 0) {
        return nullptr;
    }

    
    std::map<std::string, const HwAddress *> ifToHw;
    for (struct ifaddrs *interfaces = addrList; interfaces != NULL; interfaces = interfaces->ifa_next) {
        if (!interfaces->ifa_addr || interfaces->ifa_addr->sa_family != AF_LINK)
            continue;
        
        struct sockaddr_dl* sdl = (struct sockaddr_dl *)interfaces->ifa_addr;
        if (sdl->sdl_alen != 6)
            continue;
        std::string ifname(interfaces->ifa_name);
        if (ifToHw.find(ifname) != ifToHw.end()) {
            printf("Multiple link-level interfaces with same name!");
        } else {
            HwAddress *hwAddr = new HwAddress((uint8_t *)LLADDR(sdl), 6);
            ifToHw[ifname] = hwAddr;
            printf("Found %s mac\n", ifname.c_str());
        }
    }
    
    std::map<std::string, const HwAddress *>::iterator iter;
    struct ifaddrs *found = nullptr;
    std::map<std::string, const HwAddress *>::iterator founditer;
    for (struct ifaddrs *interfaces = addrList; interfaces != NULL; interfaces = interfaces->ifa_next) {
        if (!interfaces->ifa_addr || interfaces->ifa_addr->sa_family == AF_LINK)
            continue;
        
        if (interfaces->ifa_addr->sa_family != AF_INET) {
            continue;
        }
        
        // See if we care about this interface
        std::string ifname(interfaces->ifa_name);
        iter = ifToHw.find(ifname);
        if (iter != ifToHw.end()) {
            if (ifname.compare("en0") == 0 || !found) {
                found = interfaces;
                founditer = iter;
            }
            printf("Found %s IP\n", ifname.c_str());
        }
    }
    const HwAddress *ret = nullptr;
    if (found) {
        ret = founditer->second;
    }
    freeifaddrs(addrList);
    return ret;
}
#else

NSData *getWifi() {
    struct ifaddrs *addrList;
    
    if (getifaddrs(&addrList) != 0) {
        return nullptr;
    }
    
    NSMutableDictionary<NSString *, NSData *> *ifToHw = [NSMutableDictionary dictionary];
    for (struct ifaddrs *interfaces = addrList; interfaces != NULL; interfaces = interfaces->ifa_next) {
        if (!interfaces->ifa_addr || interfaces->ifa_addr->sa_family != AF_LINK)
            continue;
        
        struct sockaddr_dl* sdl = (struct sockaddr_dl *)interfaces->ifa_addr;
        if (sdl->sdl_alen != 6)
            continue;
        NSString *ifname = [NSString stringWithUTF8String:interfaces->ifa_name];
        if ([ifToHw objectForKey:ifname] != nil) {
            printf("Multiple link-level interfaces with same name!");
        } else {
            NSData *hwAddr = [NSData dataWithBytes:LLADDR(sdl) length:6];
            [ifToHw setValue:hwAddr forKey:ifname];
            NSLog(@"Found %@ mac\n", ifname);
        }
    }
    
    struct ifaddrs *found = nullptr;
    NSData *founddata = nullptr;
    for (struct ifaddrs *interfaces = addrList; interfaces != NULL; interfaces = interfaces->ifa_next) {
        if (!interfaces->ifa_addr || interfaces->ifa_addr->sa_family == AF_LINK)
            continue;
        
        if (interfaces->ifa_addr->sa_family != AF_INET) {
            continue;
        }
        
        // See if we care about this interface
        NSString *ifname = [NSString stringWithUTF8String:interfaces->ifa_name];
        NSData *data = [ifToHw objectForKey:ifname];
        if (data != nil) {
            if ([ifname isEqualToString:@"en0"] || !found) {
                found = interfaces;
                founddata = data;
            }
            NSLog(@"Found %@ IP\n", ifname);
        }
    }
    NSData *ret = nil;
    if (found) {
        ret = founddata;
    }
    freeifaddrs(addrList);
    return ret;
}



@interface TestLogger : NSObject <CommoLogger>
-(void)logMessage:(NSString *)message withLevel:(CommoLoggerLevel)level;
@end

@implementation TestLogger

-(void)logMessage:(NSString *)message withLevel:(CommoLoggerLevel)level
{
    NSLog(@"%@\n", message);
}

@end


@interface Listener : NSObject <CommoInterfaceStatusListener, CommoContactPresenceListener, CommoCoTMessageListener>
-(id)initWithMaster:(MasterViewController *) master;
-(void)interfaceDown:(id<CommoNetInterface>)interface;
-(void)interfaceUp:(id<CommoNetInterface>)interface;
-(void)contactAdded:(NSString *)uid;
-(void)contactRemoved:(NSString *)uid;
-(void)cotMessageReceived:(NSString *)message;
@property MasterViewController *master;
@end

@implementation Listener


-(id)initWithMaster:(MasterViewController *) master
{
    self = [super init];
    if (!self)
        return nil;
    _master = master;
    return self;
}

-(void)interfaceDown:(id<CommoNetInterface>)interface
{
    dispatch_async(dispatch_get_main_queue(), ^{
        [ _master interfaceStatus: false];
    });
}

-(void)interfaceUp:(id<CommoNetInterface>)interface
{
    dispatch_async(dispatch_get_main_queue(), ^{
        [ _master interfaceStatus: true];
    });
}

-(void)contactAdded:(NSString *)uid
{
    dispatch_async(dispatch_get_main_queue(), ^{
        [ _master addContact: uid];
        NSLog(@"Contact added %@\n", uid);
    });
}

-(void)contactRemoved:(NSString *)uid
{
    dispatch_async(dispatch_get_main_queue(), ^{
        [ _master removeContact: uid];
        NSLog(@"Contact removed %@\n", uid);
    });
}

-(void)cotMessageReceived:(NSString *)message
{
    NSLog(@"COT Message Received: %@\n", message);
    std::string s = [message UTF8String];
    size_t pos = s.find("<remarks");
    if (pos == std::string::npos)
        return;
    pos = s.find(">", pos);
    if (pos == std::string::npos)
        return;
    pos++;
    size_t end = s.find("</remarks>", pos);
    if (end == std::string::npos)
        return;
    s = s.substr(pos, end - pos);
    NSString *str = [[message substringFromIndex:pos] substringToIndex:(end - pos)];
    dispatch_async(dispatch_get_main_queue(), ^{
        [ _master addChat: str];
    });
    
}

@end

#endif


@interface MasterViewController ()

@property Commo *commo;
@property TestLogger *logger;
@property NSString *myCallsign;
@property NSString *myUID;
@property Listener *listener;

@property bool ifaceUp;


@end

@implementation MasterViewController

@synthesize contacts = _contacts;

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    //self.navigationItem.leftBarButtonItem = self.editButtonItem;

    _contacts = [NSMutableArray new];
    _chatmsgs = [NSMutableArray new];
    
    UIBarButtonItem *saButton = [[UIBarButtonItem alloc] initWithTitle:@"Send SA" style:UIBarButtonItemStylePlain target:self action:@selector(sendSA:)];
    self.navigationItem.rightBarButtonItem = saButton;
    self.detailViewController = (DetailViewController *)[[self.splitViewController.viewControllers lastObject] topViewController];
    self.title = @"Common Commo Test";
    _myUID = @"commotest-ios";
    _myCallsign = @"ios";

#ifdef NATIVE_DIRECT
    self.logger = new TestLogger();
    self.commo = new atakmap::commoncommo::Commo(self.logger);
    const HwAddress *addr = getWifi();
    
    _listener = new Listener(self);

    self.commo->addCoTMessageListener(_listener);
    self.commo->addContactPresenceListener(_listener);
    self.commo->addInterfaceStatusListener(_listener);
    
#ifdef TEST_LAN
    const char *mcast = "239.2.3.1";
    CoTMessageType type = SITUATIONAL_AWARENESS;
    self.commo->addInboundInterface(addr, 6969, &mcast, 1);
    self.commo->addBroadcastInterface(addr, &type, 1, mcast, 6969);
    mcast = "224.10.10.1";
    self.commo->addInboundInterface(addr, 17012, &mcast, 1);
#elif TEST_SSL
    const char *takserver = "192.168.135.160";
    
    CoTMessageType types[2] = { SITUATIONAL_AWARENESS, CHAT };
    self.commo->addStreamingInterface(takserver, 8089, types, 2, certData, sizeof(certData), cacertData, sizeof(cacertData), "atakatak", nullptr, nullptr);
    
#else
    const char *takserver = "192.168.135.160";
    CoTMessageType types[2] = { SITUATIONAL_AWARENESS, CHAT };
    self.commo->addStreamingInterface(takserver, 8088, types, 2, nullptr, 0, nullptr, 0, nullptr, nullptr, nullptr);
    
#endif
    
#else
    self.logger = [[TestLogger alloc] init];
    self.commo = [[Commo alloc] initWithLogger:self.logger deviceUid:_myUID callSign:_myCallsign];
    NSData *addr = getWifi();
    
    _listener = [[Listener alloc] initWithMaster:self];

    [self.commo addCoTMessageListener:_listener];
    [self.commo addContactPresenceListener:_listener];
    [self.commo addInterfaceStatusListener:_listener];
#ifdef TEST_LAN
    NSString *mcast = @"239.2.3.1";
    NSArray<NSNumber *> *types = @[[NSNumber numberWithInteger:CommoCoTMessageTypeSituationalAwareness]];
    NSArray<NSString *> *mcastAddrs = @[mcast];
    [self.commo addInboundInterfaceWithHardwareAddressBytes:addr localPort:6969 mcastAddrs:mcastAddrs];
    [self.commo addBroadcastInterfaceWithHardwareAddressBytes:addr cotMessageTypes:types mcastAddress:mcast destPort:6969];
    mcast = @"224.10.10.1";
    mcastAddrs = @[mcast];
    [self.commo addInboundInterfaceWithHardwareAddressBytes:addr localPort:17012 mcastAddrs:mcastAddrs];
#elif TEST_SSL
    NSString *takserver = @"192.168.135.160";
    NSData *cert = [NSData dataWithBytes:certData length:sizeof(certData)];
    NSData *trust = [NSData dataWithBytes:cacertData length:sizeof(cacertData)];
    
    NSArray<NSNumber *> *types = @[[NSNumber numberWithInteger:CommoCoTMessageTypeChat],
                                   [NSNumber numberWithInteger:CommoCoTMessageTypeSituationalAwareness]];
    [self.commo addStreamingInterfaceWithHostname:takserver destPort:8089 cotMessageTypes:types clientCertBytes:cert trustStoreBytes:trust certPassword:@"atakatak" username:nil password:nil];
    
#else
    NSString *takserver = @"192.168.135.160";
    NSArray<NSNumber *> *types = @[[NSNumber numberWithInteger:CommoCoTMessageTypeChat],
                                   [NSNumber numberWithInteger:CommoCoTMessageTypeSituationalAwareness]];
    [self.commo addStreamingInterfaceWithHostname:takserver destPort:8088 cotMessageTypes:types clientCertBytes:nil trustStoreBytes:nil certPassword:nil username:nil password:nil];
    
#endif

#endif


}

- (void)viewWillAppear:(BOOL)animated {
    self.clearsSelectionOnViewWillAppear = self.splitViewController.isCollapsed;
    [super viewWillAppear:animated];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)sendSA:(id)sender {
    std::string saString = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><event version=\"2.0\" uid=\"";
    saString += [_myUID UTF8String];
    saString += "\" type=\"a-f-G-U-C\" time=\"";
    saString += "2015-10-15T20:24:12.456Z";
    saString += "\" start=\"2015-10-15T20:24:12.456Z\" "
    "stale=\"2016-10-15T20:30:27.456Z\" how=\"h-e\">";
    saString += "<point lat=\"36.5261810013514\" lon=\"-77.3862509255614\" hae=\"9999999.0\" "
    "ce=\"9999999\" le=\"9999999\"/>"
    "<detail>        <contact phone=\"3152545187\" endpoint=\"10.233.154.103:4242:tcp\""
    " callsign=\"";
    saString += [_myCallsign UTF8String];
    saString += "\"/>"
    "<uid Droid=\"JDOG\"/>"
    "<__group name=\"Cyan\" role=\"Team Member\"/>"
    "<status battery=\"100\"/>"
    "<track speed=\"0.0\" course=\"56.23885995781046\"/>"
    "<precisionlocation geopointsrc=\"User\" altsrc=\"???\"/>"
    "</detail>"
    "</event>";
    NSString *str = [NSString stringWithUTF8String:saString.c_str()];
    [_commo broadcastCoTWithMessageBytes:str];
}

- (void)interfaceStatus:(bool)up {
    _ifaceUp = up;
    [self.tableView reloadData];
}

#pragma mark - Segues

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    if ([[segue identifier] isEqualToString:@"showDetail"]) {
        NSIndexPath *indexPath = [self.tableView indexPathForSelectedRow];
        DetailViewController *controller = (DetailViewController *)[[segue destinationViewController] topViewController];
#ifdef NOPENOPENOPE
        NSDate *object = self.objects[indexPath.row];
        [controller setDetailItem:object];
#endif
        controller.navigationItem.leftBarButtonItem = self.splitViewController.displayModeButtonItem;
        controller.navigationItem.leftItemsSupplementBackButton = YES;
    }
}

#pragma mark - Table View

- (void)tableView:(UITableView *)tableView willDisplayHeaderView:(UIView *)view forSection:(NSInteger)section
{
    // Background color
    if (_ifaceUp) {
        view.tintColor = [UIColor greenColor];
    } else {
        view.tintColor = [UIColor redColor];
    }
    
    // Text Color
//    UITableViewHeaderFooterView *header = (UITableViewHeaderFooterView *)view;
  //  [header.textLabel setTextColor:[UIColor whiteColor]];
    
    // Another way to set the background color
    // Note: does not preserve gradient effect of original header
    // header.contentView.backgroundColor = [UIColor blackColor];
}


- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 2;
}

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
    if (section == 0)
        return @"Contacts";
    else
        return @"Chat Messages";
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    if (section == 0)
        return _contacts.count;
    else
        return _chatmsgs.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"Cell" forIndexPath:indexPath];

    if (indexPath.section == 0) {
        NSString *contact = _contacts[indexPath.row];
        cell.textLabel.text = contact;
    } else {
        NSString *chat = _chatmsgs[indexPath.row];
        cell.textLabel.text = chat;
    }
    return cell;
}

- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {
    // Return NO if you do not want the specified item to be editable.
    return YES;
}

- (void)addChat:(NSString *)chat
{
    [_chatmsgs addObject:chat];
    
    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:_chatmsgs.count-1 inSection:1];
    NSArray *indexPaths = [NSArray arrayWithObject:indexPath];
    [self.tableView insertRowsAtIndexPaths:indexPaths withRowAnimation:UITableViewRowAnimationRight];
    
    [self.tableView selectRowAtIndexPath:indexPath animated:YES scrollPosition:UITableViewScrollPositionMiddle];
}

- (void)addContact:(NSString *)uid
{
    for (NSString *string in _contacts) {
        if ([string isEqualToString:uid])
            return;
    }
    [_contacts addObject:uid];
    
    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:_contacts.count-1 inSection:0];
    NSArray *indexPaths = [NSArray arrayWithObject:indexPath];
    [self.tableView beginUpdates];
    [self.tableView insertRowsAtIndexPaths:indexPaths withRowAnimation:UITableViewRowAnimationAutomatic];
    [self.tableView endUpdates];
}

- (void)removeContact:(NSString *)uid
{
    NSInteger index = 0;
    for (NSString *string in _contacts) {
        if ([string isEqualToString:uid])
            break;
        index++;
    }
    if (index == [_contacts count])
        return;
    [_contacts removeObjectAtIndex:index];

    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:index inSection:0];
    NSArray *indexPaths = [NSArray arrayWithObject:indexPath];
    [self.tableView deleteRowsAtIndexPaths:indexPaths withRowAnimation:UITableViewRowAnimationRight];
}




@end
