/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/tutorial_java_projects.html
 */

apply plugin: 'java'

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation("com.google.guava:guava:27.0.1-jre")

	// JOGL
    def joglVersion = '2.3.2'

    compile "org.jogamp.gluegen:gluegen-rt-main:$joglVersion"
    compile "org.jogamp.jogl:jogl-all-main:$joglVersion"

    // XML pull parser
    compile "net.sf.kxml:kxml2:2.3.0"

    // org.json
    compile("org.json:json:20190722")

    // apache http client
    compile("org.apache.httpcomponents:httpclient:4.5.12")

    // Use JUnit test framework
    testImplementation("junit:junit:4.12")

    compile fileTree(dir: '../../../../ATAK/ATAKMapEngine/lib/libs', include: '*.jar')
    compile fileTree(dir: '../../../../ATAK/ATAKMapEngine/lib/libs-pri', include: '*.jar')

    implementation project(':takengine-support-android')
    implementation project(':takengine-support-atak')
}

sourceSets {
    main {
        java {
            srcDirs '../../../../ATAK/MapCoreInterfaces/lib/src/main/java'
            srcDirs '../../../../ATAK/ATAKMapEngine/lib/src/main/java'
            srcDirs '../../../../ATAK/ATAKMapEngine/lib/src/pri-common/java'

            // exclude classes from the support library
            excludes += 'com/atakmap/map/AtakMapView.java'
            excludes += 'com/atakmap/map/EngineLibrary.java'
            excludes += 'com/atakmap/map/GLMapSurface.java'
            excludes += 'com/atakmap/map/opengl/GLMapSurface.java'
            excludes += 'com/atakmap/net/AtakAuthenticationDatabaseAdapter.java'
            excludes += 'com/atakmap/net/AtakCertificateDatabaseAdapter.java'
            excludes += 'com/atakmap/net/AtakCertificateDatabase.java'

            // various excludes
            excludes += 'com/atakmap/map/AtakMapController.java'
            excludes += 'com/atakmap/map/MapTouchHandler.java'
            excludes += 'com/atakmap/map/DefaultMapTouchHandler.java'
            excludes += 'com/atakmap/map/opengl/GLMapRenderer.java'
            excludes += 'com/atakmap/map/formats/c3dt/MainRenderContext.java'
            excludes += 'com/atakmap/map/formats/c3dt/ChildRenderContext.java'

            // disable explicit service registration
            excludes += 'com/atakmap/map/layer/Layers.java'

            // disable imagery services
            excludes += 'com/lizardtech/android/mrsid/**'
            
            // disable feature services
            excludes += 'com/atakmap/map/layer/feature/wfs/XMLWFSSchemaHandler.java'

            // disable model services
            excludes += 'com/atakmap/map/layer/model/contextcapture/**'
        }
        output.resourcesDir = 'build/classes/java/main'
    }
    test {
        java {
            srcDirs 'src/android/test'
        }
    }
}

processResources {
    with copySpec {
        from('../../../../ATAK/ATAKMapEngine/lib/src/main/res/raw')
        {
            into 'resources/raw'
        }
        from('../../../../ATAK/ATAKMapEngine/lib/src/main/res/drawable')
        {
            into 'resources/drawable'
            rename { String filename -> filename.replace('.png', '') }
        }
        from('../../../../ATAK/ATAK/app/src/main/assets/certs')
        {
            into 'assets/certs'
        }
        from('../../../../ATAK/ATAK/app/src/mil/assets/wms')
        {
            into 'assets/wms'
        }
        from("${buildDir}/jniLibs")
        {
            into 'libs'
            include '**/*.dll'
            include '**/*.so'
        }
    }
}

test {
    useJUnit()
	maxHeapSize = '1G'
}

task generateJniHeaders(dependsOn: ["classes"]) {
    // param1 = header file name (including .h)
    // param2 = class name (as string) or class names (as string list)
    ext.javah = { param1, param2 ->
        exec {
            // configure classpath used by javah
            String classpath = new File(buildDir, "/classes/main").getAbsolutePath()
            for(def cp : sourceSets.main.runtimeClasspath)
                classpath += File.pathSeparator + cp.getAbsolutePath()

            // the output file
            def output_file = (new File(projectDir, "../../../../ATAK/ATAKMapEngine/lib/src/main/cpp/" + param1)).toString()

            // create command line args
            ArrayList<String> clargs = ['javah', '-classpath', classpath, "-o", output_file]
            clargs.addAll(param2)

            // execute javah
            commandLine clargs
        }
    }

    doLast {
        def javah_properties = new File(project.projectDir, '../../../../ATAK/ATAKMapEngine/lib/src/main/cpp/javah.properties')
        if(!javah_properties.isFile() || !javah_properties.canRead())
            throw new GradleException('javah.properties file is missing')
        def prop = new Properties()
        def reader = javah_properties.newReader()
        try {
            prop.load(reader)
        } finally {
            reader.close()
        }

        prop.each { key, val ->
            javah(key, val.split(', '))
        }
    }
}

jar.dependsOn generateJniHeaders
