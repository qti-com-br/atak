#include <stdlib.h>

#include <jni.h>

#include "GLFunctionTable.h"

/**%%FUNCTION-TABLE-STUBS%%**/

%%glapi%%_function_table_t %%glapi%% =
{
/**%%FUNCTION-TABLE-STUB-INIT%%**/
};

int %%glapi%%_init_fns()
{	
    JavaVM *vm[1];
    jsize count = 0;
    JNI_GetCreatedJavaVMs(vm, 1, &count);
    if (!vm[0])
        return __LINE__;

    JNIEnv* env = NULL;
    (*vm[0])->GetEnv(vm[0], (void**)&env, JNI_VERSION_1_6);

    if (!env)
        return __LINE__;
		
	struct
    {
        jclass id;
        jmethodID getCurrent;
        jmethodID getGLProcAddressTable;
    } GLContextImpl_class;
		
    GLContextImpl_class.id = (*env)->FindClass(env, "jogamp/opengl/GLContextImpl");
    if ((*env)->ExceptionCheck(env))
        return __LINE__;
    if (!GLContextImpl_class.id) {
        (*env)->ExceptionClear(env);
        (*env)->ThrowNew(env, (*env)->FindClass(env, "java/lang/RuntimeException"), "1");
        return __LINE__;
    }
    GLContextImpl_class.getCurrent = (*env)->GetStaticMethodID(env, GLContextImpl_class.id, "getCurrent", "()Lcom/jogamp/opengl/GLContext;");
    if ((*env)->ExceptionCheck(env))
        return __LINE__;
    if (!GLContextImpl_class.getCurrent) {
        (*env)->ExceptionClear(env);
        (*env)->ThrowNew(env, (*env)->FindClass(env, "java/lang/RuntimeException"), "2");
        return __LINE__;
    }
    GLContextImpl_class.getGLProcAddressTable = (*env)->GetMethodID(env, GLContextImpl_class.id, "getGLProcAddressTable", "()Lcom/jogamp/gluegen/runtime/ProcAddressTable;");
    if ((*env)->ExceptionCheck(env))
        return __LINE__;
    if (!GLContextImpl_class.getGLProcAddressTable) {
        (*env)->ExceptionClear(env);
        (*env)->ThrowNew(env, (*env)->FindClass(env, "java/lang/RuntimeException"), "3");
        return __LINE__;
    }
    
    jobject mcontext = (*env)->CallStaticObjectMethod(env, GLContextImpl_class.id, GLContextImpl_class.getCurrent);
    if ((*env)->ExceptionCheck(env))
        return __LINE__;
    if (!mcontext) {
        (*env)->ExceptionClear(env);
        (*env)->ThrowNew(env, (*env)->FindClass(env, "java/lang/RuntimeException"), "4");
        return __LINE__;
    }
    jobject mglProcAddressTable = (*env)->CallObjectMethod(env, mcontext, GLContextImpl_class.getGLProcAddressTable);
    if ((*env)->ExceptionCheck(env))
        return __LINE__;
    if (!mglProcAddressTable) {
        (*env)->ExceptionClear(env);
        (*env)->ThrowNew(env, (*env)->FindClass(env, "java/lang/RuntimeException"), "5");
        return __LINE__;
    }
    (*env)->DeleteLocalRef(env, mcontext);
    jclass ProcessAddressTableImpl_class = (*env)->GetObjectClass(env, mglProcAddressTable);
    if ((*env)->ExceptionCheck(env))
        return __LINE__;
    if (!ProcessAddressTableImpl_class) {
        (*env)->ExceptionClear(env);
        (*env)->ThrowNew(env, (*env)->FindClass(env, "java/lang/RuntimeException"), "6");
        return __LINE__;
    }

#define SET_FN_PTR(name, sig) \
{ \
    jfieldID fid = (*env)->GetFieldID(env, ProcessAddressTableImpl_class, "_addressof_" #name, "J"); \
    if ((*env)->ExceptionCheck(env) || !fid)  {\
        (*env)->ExceptionClear(env); \
    } else {\
        %%glapi%%.name = (sig)(intptr_t)(*env)->GetLongField(env, mglProcAddressTable, fid); \
    } \
}

/**%%FUNCTION-TABLE-SET%%**/

    (*env)->DeleteLocalRef(env, mglProcAddressTable);

	return 0;
}

